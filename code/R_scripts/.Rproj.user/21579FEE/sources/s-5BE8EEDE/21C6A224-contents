library(randomForest)
library(xgboost)
library(caret)

#trains rf and xgboost on new simulated population offspring phenotype with "ground truth" marker effects
#test trait sumary statistics prediction on real populations
#1. simulate parents and offspring (sim_sim_pops.py)
#2. calculate offspring trait summary statistics with estimated marker effects (rrBLUP_phenos_all.R)
#3. train rf, xgboost and BL models on features of simulated parents (correlation of parental mrk effects along chromosome)
#4. test rf on offspring trait summary statistics of real population

#load sim geno + marker effects
rrblup_preds_all <- read.csv("../stats/pheno_prediction/rrBLUP_mrk_effects_all.csv")
#read trait summary stats sim+real
sim_pops_summary <- read.csv("../stats/pheno_prediction/sim_pops_summary.csv")
real_summary <- read.csv("../stats/pheno_prediction/real_summary.csv")
#read correlation features
sim_cors <- read.csv("../stats/pheno_prediction/sim_cors.csv")
real_cors <- read.csv("../stats/pheno_prediction/real_cors.csv")
#read parental traits
parent_traits <- read.csv("../stats/pheno_prediction/parent_traits.csv")

#goal: rmse + correlation coeff + corr pval for pred + real for traits for trait mean + 95th perc for rf, xgboost, cnn, baseline.
traits <- c("silk", "tassel", "oil", "protein", "starch")
tasks <- c("trait_mean", "trait_95_perc")
pred_results <- data.frame("model" = NA, "task" = NA, "trait" = NA, "rmse" = NA, "corr" = NA,
                           "corr_p" = NA, "best_predict" = NA)
for(i in traits){
  real_cors_i <- real_cors[real_cors$trait == i,!colnames(real_cors) %in% c("trait")]
  sim_cors_i <- sim_cors[sim_cors$trait == i,!colnames(sim_cors) %in% c("trait")]
  parent_traits_i <- parent_traits[parent_traits$trait == i,]
  effects_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
  intercept_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
  for(j in tasks){
    real_y <- real_summary[real_summary$trait == i, j]
    sim_y <- sim_pops_summary[sim_pops_summary$trait == i, j]
    model <- "RandomForest"
    ##random forest with default params
    #train on sim cors
    rf <- randomForest(x = sim_cors_i, y = sim_y)
    #predict on real trait cors
    rf_pred <- predict(rf, real_cors_i)
    #create pred results
    rmse <- sqrt(mean((rf_pred - real_y)^2))
    corr <- cor.test(rf_pred, real_y)
    best_predict <- which.max(rf_pred) == which.max(real_y)
    pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3), 
                            ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
    pred_results <- rbind(pred_results, pred_results_i_j_k)
    png(paste("../plots/prediction_plots/RandomForest/RF_",j,"_",i,".png",sep = ""),width = 900, height = 768)
    plot(rf_pred, real_y, col = "blue", pch = 16, cex = 2.5, xlab = "Predicted phenotype", ylab = "True phenotype",
         cex.lab = 1.5)
    dev.off()
    model <- "XGBoost"
    ##xgboost with best parametrization w.r.t. grid search (see below)
    #get parametrization from running grid search once
    params <- list(
      objective = "reg:squarederror",
      nrounds = 500,
      max_depth = 3,
      eta = 0.1,
      gamma = 1,
      colsample_bytree = 1,         
      min_child_weight = 5,
      subsample = 0.8
    )
    dtrain <- xgb.DMatrix(data = as.matrix(sim_cors_i), label = sim_y)
    xgb <- xgboost(params = params, data = dtrain, nrounds = params$nrounds)
    xgb_pred <- predict(xgb, as.matrix(real_cors_i))
    #create pred results
    rmse <- sqrt(mean((xgb_pred - real_y)^2))
    corr <- cor.test(xgb_pred, real_y)
    best_predict <- which.max(xgb_pred) == which.max(real_y)
    pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3), 
                            ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
    pred_results <- rbind(pred_results, pred_results_i_j_k)
    png(paste("../plots/prediction_plots/XGBoost/XGB_",j,"_",i,".png",sep = ""),width = 900, height = 768)
    plot(xgb_pred, real_y, col = "blue", pch = 16, cex = 2.5, xlab = "Predicted phenotype", ylab = "True phenotype",
         cex.lab = 1.5)
    dev.off()
    model <- "baseline"
    ##mean of parents for trait mean, 95th percentile binomial sampling parent markers
    if(j == "trait_mean"){
      mean_pred <- NULL
      for(k in parent_traits_i$pop[-1]){
        parent_cross <- parent_traits_i[parent_traits_i$pop %in% c(0,k),
                                        !colnames(parent_traits_i) %in% c("parent","pop","trait")]
        mean_pred <- c(mean_pred, mean(rowSums(parent_cross) + intercept_i))
      }
      rmse <- sqrt(mean((mean_pred - real_y)^2))
      corr <- cor.test(mean_pred, real_y)
      best_predict <- which.max(mean_pred) == which.max(real_y)
      pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3), 
                              ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
      pred_results <- rbind(pred_results, pred_results_i_j_k)
      png(paste("../plots/prediction_plots/baseline/BL_",j,"_",i,".png",sep = ""),width = 900, height = 768)
      plot(mean_pred, real_y, col = "blue", pch = 16, cex = 2.5, xlab = "Predicted phenotype", ylab = "True phenotype",
           cex.lab = 1.5)
      dev.off()
    }
    if(j == "trait_95_perc"){
      binom_pred <- NULL
      for(k in parent_traits_i$pop[-1]){
        binom_offspr <- NULL
        for(l in 1:200){
          sample_l <- sample(c(-1,1), size = length(effects_i), replace = TRUE, prob = c(0.5, 0.5))
          binom_offspr <- c(binom_offspr, sum(effects_i*sample_l) + intercept_i)
        }
        binom_pred <- c(binom_pred, quantile(binom_offspr, probs = 0.95))
      }
      rmse <- sqrt(mean((binom_pred - real_y)^2))
      corr <- cor.test(binom_pred, real_y)
      best_predict <- which.max(binom_pred) == which.max(real_y)
      pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3), 
                              ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
      pred_results <- rbind(pred_results, pred_results_i_j_k)
      png(paste("../plots/prediction_plots/baseline/BL_",j,"_",i,".png",sep = ""),width = 900, height = 768)
      plot(binom_pred, real_y, col = "blue", pch = 16, cex = 2.5, xlab = "Predicted phenotype", ylab = "True phenotype",
           cex.lab = 1.5)
      dev.off()
    }
  }
}

write.csv(pred_results[-1,], "../stats/pheno_prediction/results/pred_results_trees_BL.csv", row.names = FALSE)



#conclusion: using trait correlation is not useful for predicting trait summary statistics
#using rf, xgboost, baseline models dont perform well (non-trivial task)

#train xgboost model with grid search to determine best params
sim_cors <- sim_cors[sim_cors$trait == "silk",!colnames(sim_cors) %in% c("trait")]
sim_cors$target <- sim_pops_summary[sim_pops_summary$trait == "silk", "trait_95_perc"]

folds <- createFolds(sim_cors$target, k = 5, list = TRUE, returnTrain = FALSE)
control_params <- trainControl(method = "cv", number = 5, index = folds)

param_grid_xgboost <- expand.grid(
  eta = c(0.01, 0.1, 0.3),
  max_depth = c(3, 6, 9),
  subsample = c(0.8, 1.0),
  colsample_bytree = c(0.8, 1.0),
  gamma = c(0, 1, 5),
  min_child_weight = c(1, 5, 10),
  nrounds = 500
)
grid_result <- train(
  method = "xgbTree",
  x = sim_cors[,!colnames(sim_cors) %in% c("target")],
  y = sim_cors$target,
  trControl = control_params,
  tuneGrid = param_grid_xgboost,
  metric = "RMSE"
)
grid_result[["bestTune"]]
##best params:
params <- list(
  objective = "reg:squarederror",
  nrounds = 500,
  max_depth = 3,
  eta = 0.1,
  gamma = 1,
  colsample_bytree = 1,         
  min_child_weight = 5,
  subsample = 0.8
)

