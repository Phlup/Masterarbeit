library(Matrix)
library(MASS)
library(crayon)
library(sommer)
library(zoo)
source("stat_functions.R")

##train rrBLUP for global marker effect estimation
##calc trait summary stats for real+simulated+simulated parent cross populations and plot cumsum along genome
##calc parental trait correlations
##create parental trait + genmap information dfs

#read in NAM phenotypes per individual and mean over pop+env
NAM_phenotypes <- read.csv("../data/NAM_phenotype_data/NAM_phenotypes.csv")
#read genmap to constrain markers
genmap <- read.csv("../data/sim_data/B73_genmap.csv")
#read populations
populations <- read.csv("../data/sim_data/populations.csv")
#read parent genotypes
NAM_parent_add = read.csv("../data/sim_data/NAM_parent_add.csv")

##estimate rrblup marker effects (long compute on ~4200x974x5 samples)
rrblup_preds_all <- data.frame(NULL)
traits <- c("silk", "tassel", "oil", "protein", "starch")
env <- "06A"
for(i in traits){
  ##calculate marker effects over all real population geno+phenotypes
  all_real <- data.frame(NULL)
  IDs_all <- data.frame(NULL)
  
  for(j in populations$pop){
    real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",j,"_add.csv", sep = ""))
    real_add <- real_add[,c("individual",genmap$Marker)]
    real_add$pop <- j
    all_real <- rbind(all_real, real_add)
    IDs_all <- rbind(IDs_all, NAM_phenotypes[NAM_phenotypes$pop == j & NAM_phenotypes$env == env &
                                               NAM_phenotypes$trait == i,c("pop", "individual")])
  }
  ID_both <- intersect(paste(all_real$individual, all_real$pop), paste(IDs_all$individual, IDs_all$pop))
  all_real <- all_real[paste(all_real$individual, all_real$pop) %in% ID_both,
                       !colnames(all_real) %in% c("individual", "pop")]
  phenos <- NAM_phenotypes[paste(NAM_phenotypes$individual, NAM_phenotypes$pop) %in% ID_both
                           & NAM_phenotypes$env == env & NAM_phenotypes$trait == i,]  
  row.names(phenos) <- ID_both
  row.names(all_real) <- ID_both
  #sample <- sample(ID_both, 50)
  #phenos <- phenos[sample,]
  #all_real <- all_real[sample,]
  rBLUP <- mmer(value ~ 1, random = ~vsr(list(all_real)), rcov=~units, data = phenos, verbose = TRUE)
  #get marker effects + intercept
  effects <- rBLUP$U$`u:all_real`$value
  intercept <- rBLUP$Beta$Estimate
  rrblup_preds_i <- data.frame("marker" = names(effects), "effect" = effects,
                                 "intercept" = intercept, "trait" = i, "env" = env)  
  rrblup_preds_all <- rbind(rrblup_preds_all, rrblup_preds_i)
}

write.csv(rrblup_preds_all, "../stats/pheno_prediction/rrBLUP_mrk_effects_all.csv", row.names = FALSE)


##calc trait summary stats for real+simulated
#read rrblup_preds_all
rrblup_preds_all <- read.csv("../stats/pheno_prediction/rrBLUP_mrk_effects_all.csv")
#create output dfs
real_preds <- data.frame("pop" = NULL, "ind" = NULL, "pred" = NULL, "trait" = NULL, "env" = NULL)
sim_preds <- data.frame("pop" = NULL, "pred" = NULL, "trait" = NULL, "env" = NULL)
real_summary <- data.frame("pop" = rep(populations$pop, times = 5), "trait" = rep(traits, each = length(populations$pop)),
                           "trait_mean" = NA, "trait_max" = NA, "trait_min" = NA, "trait_var" = NA, "trait_95_perc" = NA,
                           "parent_mean" = NA)
sim_summary <- data.frame("pop" = rep(populations$pop, times = 5), "trait" = rep(traits, each = length(populations$pop)),
                          "trait_mean" = NA, "trait_max" = NA, "trait_min" = NA, "trait_var" = NA, "trait_95_perc" = NA,
                          "parent_mean" = NA)

#for just one env, no fixed effect calc
env <- "06A"
for(i in populations$pop){
  
  #load real and simulated genotypes (additive encoding)
  sim_add <- read.csv(paste("../sim_output/normal_rec/additive_encoding/add_",i,".csv", sep = ""))
  real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
  sim_add <- sim_add[,genmap$Marker]
  real_add <- real_add[,c("individual",genmap$Marker)]
  NAM_parent_add <- NAM_parent_add[,c("pop",genmap$Marker)]
  parent_cross <- NAM_parent_add[NAM_parent_add$pop %in% c(0,i),!colnames(NAM_parent_add) %in% c("parent","pop")]
  
  for(j in traits){
    #subset real and sim add and phenotypes based on intersection of individual ids per env and pop
    #not all real genotypes have measured phenotype and otherwise
    effects <- rrblup_preds_all[rrblup_preds_all$trait == j, "effect"]
    intercept <- rrblup_preds_all[rrblup_preds_all$trait == j, "intercept"][1]
    phenos <- NAM_phenotypes[NAM_phenotypes$pop == i & NAM_phenotypes$env == env & NAM_phenotypes$trait == j,]
    IDs <- intersect(real_add$individual, phenos$individual)
    sim_temp <- sim_add[sample(row.names(sim_add), length(IDs)),]
    real_temp <- real_add[real_add$individual %in% IDs,-1]
    
    #calc pred. values on real genos
    pred_real <- t(apply(real_temp,1,function(x){effects*x}))
    #calc pred. values on sim genos
    pred_sim <- t(apply(sim_temp,1,function(x){effects*x}))
    #calc exp values of parental cross
    parent_exp <- t(apply(parent_cross,1,function(x){effects*x}))
    
    #additive phenotype
    real_phenos <- rowSums(pred_real) + intercept
    sim_phenos <- rowSums(pred_sim) + intercept
    parent_phenos <- rowSums(parent_exp) + intercept
    
    #save predictions and summary stats
    real_preds <- rbind(real_preds,
                        data.frame("pop" = i, "ind" = names(real_phenos),
                                   "pred" = real_phenos, "trait" = j, "env" = env))
    
    sim_preds <- rbind(sim_preds,
                       data.frame("pop" = i, "pred" = sim_phenos, "trait" = j, "env" = env))
    
    real_summary[real_summary$pop == i & real_summary$trait == j,
                 c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc", "parent_mean")] <- c(
                   mean(real_phenos), max(real_phenos), min(real_phenos), var(real_phenos),
                   quantile(real_phenos, probs = 0.95), mean(parent_phenos)
                 )
    
    sim_summary[sim_summary$pop == i & sim_summary$trait == j,
                c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc", "parent_mean")] <- c(
                  mean(sim_phenos), max(sim_phenos), min(sim_phenos), var(sim_phenos), 
                  quantile(sim_phenos, probs = 0.95), mean(parent_phenos)
                )
    marker_num <- length(colnames(pred_real))
    #generate plots for marker effects along chromosome in sim vs real pop
    png(paste("../plots/pheno_plots/",j,"/pop_",i,"_trait_cumsums.png",sep = ""),width = 900, height = 768)
    par(mfrow=c(1,2))
    min_y <- min(min(real_phenos), min(sim_phenos), min(parent_phenos))
    max_y <- max(max(real_phenos), max(sim_phenos), max(parent_phenos))
    abs <- max_y - min_y
    min_y <- min_y - 0.2*abs
    max_y <- max_y + 0.2*abs
    #sim phenos
    plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
         ylab = "cumulative marker effects along chromosome", xlab = "Marker", main = "Simulated offspring", cex.lab = 1.5)
    for(k in 1:length(row.names(pred_sim))){
      lines(cumsum(pred_sim[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))  
    }
    text(x = 250, paste("mean:", round(mean(sim_phenos),2 )), y = max_y, cex = 1.2)
    text(x = 250, paste("max:", round(max(sim_phenos),2 )), y = max_y -1*((max_y-min_y)*0.05), cex = 1.2)
    text(x = 250, paste("min:", round(min(sim_phenos),2 )), y = max_y -2*((max_y-min_y)*0.05), cex = 1.2)
    text(x = 250, paste("var:", round(var(sim_phenos),2 )), y = max_y -3*((max_y-min_y)*0.05), cex = 1.2)
    text(x = 250, paste("95th quantile:", round(quantile(sim_phenos, probs = 0.95),2 )), y = max_y -4*((max_y-min_y)*0.05), cex = 1.2)
    #real phenos
    plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
         ylab = "cumulative marker effects along chromosome", xlab = "Marker", main = "Real offspring", cex.lab = 1.5)
    for(k in 1:length(row.names(pred_real))){
      lines(cumsum(pred_real[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))  
    }
    lines(cumsum(parent_exp[1,])+intercept, col = "blue", lwd = 5)
    lines(cumsum(parent_exp[2,])+intercept, col = "red", lwd = 5)
    text(x = 250, paste("mean:", round(mean(real_phenos),2 )), y = max_y, cex = 1.2)
    text(x = 250, paste("max:", round(max(real_phenos),2 )), y = max_y -1*((max_y-min_y)*0.05), cex = 1.2)
    text(x = 250, paste("min:", round(min(real_phenos),2 )), y = max_y -2*((max_y-min_y)*0.05), cex = 1.2)
    text(x = 250, paste("var:", round(var(real_phenos),2 )), y = max_y -3*((max_y-min_y)*0.05), cex = 1.2)
    text(x = 250, paste("95th quantile:", round(quantile(real_phenos, probs = 0.95),2 )), y = max_y -4*((max_y-min_y)*0.05), cex = 1.2)
    text(x = 250, paste("parent mean:", round(mean(parent_phenos), 2)), y = max_y -5*((max_y-min_y)*0.05), cex = 1.2)
    legend("bottomright", legend = c("B73 traits", paste(populations[populations$pop == i, "parent"], "traits"),
                                     "offspring traits"), col = c("blue","red","black"), lty = 1, lwd = c(3,3,1), cex = 1.5)
    dev.off()
  }
}

#save output dfs
write.csv(real_preds, "../stats/pheno_prediction/real_preds.csv", row.names = FALSE)
write.csv(sim_preds, "../stats/pheno_prediction/sim_preds.csv", row.names = FALSE)
write.csv(real_summary, "../stats/pheno_prediction/real_summary.csv", row.names = FALSE)
write.csv(sim_summary, "../stats/pheno_prediction/sim_summary.csv", row.names = FALSE)


##calc additional pheno stats for prediction pipeline
##calc trait summary stats for simulated parent cross populations
#read simulated populations
sim_populations <- read.csv("../sim_output/parent_sim/sim_populations.csv")
#read rrblup_preds_all
rrblup_preds_all <- read.csv("../stats/pheno_prediction/rrBLUP_mrk_effects_all.csv")
sim_pops_summary <- data.frame("pop" = rep(sim_populations$pop, times = 5),
                          "trait" = rep(traits, each = length(sim_populations$pop)),
                          "trait_mean" = NA, "trait_max" = NA, "trait_min" = NA, "trait_var" = NA,
                          "trait_95_perc" = NA)
#calc sim pop traits with mrk effects
for(i in traits){
  effects <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
  intercept <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
  for(j in sim_populations$pop){
    sim_add_j <- read.csv(paste("../sim_output/parent_sim/additive_encoding/add_",j,".csv", sep = ""))
    sim_add_j <- sim_add_j[,genmap$Marker]
    #calculate simulated offspring phenotypes
    sim_traits <- t(apply(sim_add_j,1,function(x){effects*x}))
    sim_phenos <- rowSums(sim_traits) + intercept
    #calc trait dist parameters
    sim_pops_summary[sim_pops_summary$pop == j & sim_pops_summary$trait == i,
                c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc")] <- c(
      mean(sim_phenos), max(sim_phenos), min(sim_phenos), var(sim_phenos), quantile(sim_phenos, probs = 0.95)
    )
  }
}
write.csv(sim_pops_summary, "../stats/pheno_prediction/sim_pops_summary.csv", row.names = FALSE)

####calc parental trait correlations
#create df with parent information
real_pops <- data.frame("pop" = populations$pop, "parent_1" = "B73", "parent_2" = populations$parent)
sim_parents <- strsplit(sim_populations[, "name"], "_")
sim_pops <- data.frame("pop" = sim_populations$pop, "parent_1" = sapply(sim_parents, "[[", 1),
                       "parent_2" = sapply(sim_parents, "[[", 2))
#read rrblup_preds_all
rrblup_preds_all <- read.csv("../stats/pheno_prediction/rrBLUP_mrk_effects_all.csv")
#read real parent genotypes
real_parent_add <- read.csv("../data/sim_data/NAM_parent_add.csv")
real_parent_add <- real_parent_add[,c("pop","parent",genmap$Marker)]
real_cors <- data.frame(NULL)
sim_cors <- data.frame(NULL)
parent_traits <- data.frame(NULL)
for(i in traits){
  effects <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
  intercept <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
  #calc traits on parents
  parent_traits_i <- cbind(real_parent_add[,c("pop", "parent")],
                         t(apply(real_parent_add[,!colnames(real_parent_add) %in% c("pop","parent")],
                                 1,function(x){effects*x})))
  ##calc rolling trait correlations on traits
  real_cors_i <- calc_trait_cor(traits = parent_traits_i, populations = real_pops, window_size = 15, genmap = genmap)[-1]
  sim_cors_i <- calc_trait_cor(traits = parent_traits_i, populations = sim_pops, window_size = 15, genmap = genmap)[-1]
  
  parent_traits_i$trait <- i
  parent_traits <- rbind(parent_traits, parent_traits_i)
  real_cors_i$trait <- i
  real_cors <- rbind(real_cors, real_cors_i)
  sim_cors_i$trait <- i
  sim_cors <- rbind(sim_cors, sim_cors_i)
}
##add trait column to dfs
write.csv(real_cors, "../stats/pheno_prediction/real_cors.csv", row.names = FALSE)
write.csv(sim_cors, "../stats/pheno_prediction/sim_cors.csv", row.names = FALSE)
write.csv(parent_traits, "../stats/pheno_prediction/parent_traits.csv", row.names = FALSE)

##save parent pair traits + genmap information for sim and real
##add additional genmap information
#read parent_traits
parent_traits <- read.csv("../stats/pheno_prediction/parent_traits.csv")
real_parent_trait_map <- data.frame(NULL)
sim_parent_trait_map <- data.frame(NULL)
#read genmap posdiff
genmap_posdiff <- read.csv("../data/sim_data/genmap_posdiff.csv")
for(i in traits){
  parent_traits_i <- parent_traits[parent_traits$trait == i, !colnames(parent_traits) %in% c("trait")]
  for(j in real_pops$pop){
    parents <- real_pops[real_pops$pop == j, c("parent_1", "parent_2")]
    real_traits_j <- parent_traits_i[parent_traits_i$parent %in% parents,
                                     !colnames(parent_traits_i) %in% c("pop", "parent")]
    real_traits_j <- rbind(real_traits_j, genmap$Position.bp., genmap$Rate.cM.Mb., genmap$Map.cM.,
                           genmap_posdiff$pos_diff)
    real_traits_j$feature <- c("p1","p2","position","rate","cM","pos_diff")
    real_traits_j$trait <- i
    real_parent_trait_map <- rbind(real_parent_trait_map, real_traits_j)
  }
  for(j in sim_pops$pop){
    parents <- sim_pops[sim_pops$pop == j, c("parent_1", "parent_2")]
    sim_traits_j <- parent_traits_i[parent_traits_i$parent %in% parents,
                                    !colnames(parent_traits_i) %in% c("pop", "parent")]
    sim_traits_j <- rbind(sim_traits_j, genmap$Position.bp., genmap$Rate.cM.Mb., genmap$Map.cM.,
                          genmap_posdiff$pos_diff)
    sim_traits_j$feature <- c("p1","p2","position","rate","cM","pos_diff")
    sim_traits_j$trait <- i
    sim_parent_trait_map <- rbind(sim_parent_trait_map, sim_traits_j)
  }
}
write.csv(real_parent_trait_map, "../stats/pheno_prediction/real_parent_trait_map.csv", row.names = FALSE)
write.csv(sim_parent_trait_map, "../stats/pheno_prediction/sim_parent_trait_map.csv", row.names = FALSE)
