ylab = "cumulative marker effects along chromosome", xlab = "marker", main = "Simulated offspring")
for(k in 1:length(row.names(pred_sim))){
lines(cumsum(pred_sim[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))
#add nam parents phenotype
}
text(x = 250, paste("mean:", round(mean(sim_phenos),2 )), y = max_y)
text(x = 250, paste("max:", round(max(sim_phenos),2 )), y = max_y -1*((max_y-min_y)*0.05))
text(x = 250, paste("min:", round(min(sim_phenos),2 )), y = max_y -2*((max_y-min_y)*0.05))
text(x = 250, paste("var:", round(var(sim_phenos),2 )), y = max_y -3*((max_y-min_y)*0.05))
text(x = 250, paste("95th quantile:", round(quantile(sim_phenos, probs = 0.95),2 )), y = max_y -4*((max_y-min_y)*0.05))
#real phenos
plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
ylab = "cumulative marker effects along chromosome", xlab = "marker", main = "Real offspring")
for(k in 1:length(row.names(pred_real))){
lines(cumsum(pred_real[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))
}
lines(cumsum(parent_exp[1,]), col = "blue", lwd = 5)
lines(cumsum(parent_exp[2,]), col = "red", lwd = 5)
text(x = 250, paste("mean:", round(mean(real_phenos),2 )), y = max_y)
text(x = 250, paste("max:", round(max(real_phenos),2 )), y = max_y -1*((max_y-min_y)*0.05))
text(x = 250, paste("min:", round(min(real_phenos),2 )), y = max_y -2*((max_y-min_y)*0.05))
text(x = 250, paste("var:", round(var(real_phenos),2 )), y = max_y -3*((max_y-min_y)*0.05))
text(x = 250, paste("95th quantile:", round(quantile(real_phenos, probs = 0.95),2 )), y = max_y -4*((max_y-min_y)*0.05))
legend("bottomright", legend = c("B73 traits", paste(populations[populations$pop == 1, "parent"], "traits"),
"offspring traits"), col = c("blue","red","black"), lty = 1, lwd = c(3,3,1))
par(mfrow=c(1,2))
min_y <- min(rowSums(pred_real), rowSums(pred_sim)) - 1
max_y <- max(rowSums(pred_real), rowSums(pred_sim)) + 1
#sim phenos
plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
ylab = "cumulative marker effects along chromosome", xlab = "marker", main = "Simulated offspring")
for(k in 1:length(row.names(pred_sim))){
lines(cumsum(pred_sim[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))
#add nam parents phenotype
}
text(x = 250, paste("mean:", round(mean(sim_phenos),2 )), y = max_y)
text(x = 250, paste("max:", round(max(sim_phenos),2 )), y = max_y -1*((max_y-min_y)*0.05))
text(x = 250, paste("min:", round(min(sim_phenos),2 )), y = max_y -2*((max_y-min_y)*0.05))
text(x = 250, paste("var:", round(var(sim_phenos),2 )), y = max_y -3*((max_y-min_y)*0.05))
text(x = 250, paste("95th quantile:", round(quantile(sim_phenos, probs = 0.95),2 )), y = max_y -4*((max_y-min_y)*0.05))
#real phenos
plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
ylab = "cumulative marker effects along chromosome", xlab = "marker", main = "Real offspring")
for(k in 1:length(row.names(pred_real))){
lines(cumsum(pred_real[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))
}
lines(cumsum(parent_exp[1,]), col = "blue", lwd = 5)
lines(cumsum(parent_exp[2,]), col = "red", lwd = 5)
text(x = 250, paste("mean:", round(mean(real_phenos),2 )), y = max_y)
text(x = 250, paste("max:", round(max(real_phenos),2 )), y = max_y -1*((max_y-min_y)*0.05))
text(x = 250, paste("min:", round(min(real_phenos),2 )), y = max_y -2*((max_y-min_y)*0.05))
text(x = 250, paste("var:", round(var(real_phenos),2 )), y = max_y -3*((max_y-min_y)*0.05))
text(x = 250, paste("95th quantile:", round(quantile(real_phenos, probs = 0.95),2 )), y = max_y -4*((max_y-min_y)*0.05))
legend("bottomright", legend = c("B73 traits", paste(populations[populations$pop == 1, "parent"], "traits"),
"offspring traits"), col = c("blue","red","black"), lty = 1, lwd = c(3,3,1))
#sim phenos
plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
ylab = "cumulative marker effects along chromosome", xlab = "marker", main = "Simulated offspring")
for(k in 1:length(row.names(pred_sim))){
lines(cumsum(pred_sim[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))
#add nam parents phenotype
}
library(Matrix)
library(MASS)
library(crayon)
library(sommer)
library(openxlsx)
##train rrBLUP and gBLUP models to calc accuracy on real and sim datasets (MSE test/train traits)
##and determine best cross of sim datasets (max traits with calc marker effects)
##calc accuracy of simulated best crosses based on real pheno max
#read in NAM phenotypes per individual and mean over pop+env
NAM_phenotypes <- read.csv("../data/NAM_phenotype_data/NAM_phenotypes.csv")
#read genmap to constrain markers
genmap <- read.csv("../data/sim_data/B73_genmap.csv")
#read populations
populations <- read.csv("../data/sim_data/populations.csv")
# read parent genotypes
NAM_parent_add = read.csv("../data/sim_data/NAM_parent_add.csv")
traits <- c("silk", "tassel", "oil", "protein", "starch")
#create output dfs
rrblup_preds <- data.frame("pop" = NULL, "marker" = NULL, "effect" = NULL, "trait" = NULL, "env" = NULL)
real_preds <- data.frame("pop" = NULL, "ind" = NULL, "pred" = NULL, "trait" = NULL, "env" = NULL)
sim_preds <- data.frame("pop" = NULL, "pred" = NULL, "trait" = NULL, "env" = NULL)
real_summary <- data.frame("pop" = rep(populations$pop, times = 5), "trait" = rep(traits, each = length(populations$pop)),
"trait_mean" = NA, "trait_max" = NA, "trait_min" = NA, "trait_var" = NA, "trait_95_perc" = NA)
sim_summary <- data.frame("pop" = rep(populations$pop, times = 5), "trait" = rep(traits, each = length(populations$pop)),
"trait_mean" = NA, "trait_max" = NA, "trait_min" = NA, "trait_var" = NA, "trait_95_perc" = NA)
NAM_pheno_reduced <- data.frame("pop" = NULL, "individual" = NULL, "value" = NULL, "env" = NULL, "trait" = NULL)
#for now, focus on env Aurora NY 2006 (06A) and Columbia MO 2006 (06MO)
#for each env individually, no fixed effect calc
env <- "06A"
for(i in populations$pop){
#load real and simulated genotypes (additive encoding)
sim_add <- read.csv(paste("../sim_output/normal_rec/additive_encoding/add_",i,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,c("individual",genmap$Marker)]
NAM_parent_add <- NAM_parent_add[,c("pop",genmap$Marker)]
parent_cross <- NAM_parent_add[NAM_parent_add$pop %in% c(0,i),!colnames(NAM_parent_add) %in% c("parent","pop")]
for(j in traits){
#subset real and sim add and phenotypes based on intersection of individual ids per env and pop
#not all real genotypes have measured phenotype and otherwise
phenos <- NAM_phenotypes[NAM_phenotypes$pop == i & NAM_phenotypes$env == env & NAM_phenotypes$trait == j,]
IDs <- intersect(real_add$individual, phenos$individual)
sim_temp <- sim_add[sample(row.names(sim_add), length(IDs)),]
real_temp <- real_add[real_add$individual %in% IDs,-1]
phenos <- phenos[phenos$individual %in% IDs,]
NAM_pheno_reduced <- rbind(NAM_pheno_reduced, phenos)
##run rrBLUP
rBLUP <- mmer(value ~ 1, random = ~vsr(list(real_temp)), rcov=~units, data = phenos, verbose = FALSE)
#get marker effects + intercept
effects <- rBLUP$U$`u:real_temp`$value
intercept <- rBLUP$Beta$Estimate
residuals <- rBLUP$residuals
#calc pred. values on real genos
pred_real <- t(apply(real_temp,1,function(x){effects*x}))
#calc pred. values on sim genos
pred_sim <- t(apply(sim_temp,1,function(x){effects*x}))
#calc exp values of parental cross
parent_exp <- t(apply(parent_cross,1,function(x){effects*x}))
#additive phenotype
real_phenos <- rowSums(pred_real) + intercept
sim_phenos <- rowSums(pred_sim) + intercept
#save predictions and summary stats
rrblup_preds <- rbind(rrblup_preds,
data.frame("pop" = i, "marker" = names(effects),
"effect" = effects, "trait" = j, "env" = env))
real_preds <- rbind(real_preds,
data.frame("pop" = i, "ind" = names(real_phenos),
"pred" = real_phenos, "trait" = j, "env" = env))
sim_preds <- rbind(sim_preds,
data.frame("pop" = i, "pred" = sim_phenos, "trait" = j, "env" = env))
real_summary[real_summary$pop == i & real_summary$trait == j,
c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc")] <- c(
mean(real_phenos), max(real_phenos), min(real_phenos), var(real_phenos), quantile(real_phenos, probs = 0.95)
)
sim_summary[sim_summary$pop == i & sim_summary$trait == j,
c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc")] <- c(
mean(sim_phenos), max(sim_phenos), min(sim_phenos), var(sim_phenos), quantile(sim_phenos, probs = 0.95)
)
marker_num <- length(colnames(pred_real))
#generate plots for marker effects along chromosome in sim vs real pop
png(paste("../plots/pheno_plots/",j,"/pop_",i,"_trait_cumsums.png",sep = ""),width = 900, height = 768)
par(mfrow=c(1,2))
min_y <- min(rowSums(pred_real), rowSums(pred_sim)) - 1
max_y <- max(rowSums(pred_real), rowSums(pred_sim)) + 1
#sim phenos
plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
ylab = "cumulative marker effects along chromosome", xlab = "marker", main = "Simulated offspring")
for(k in 1:length(row.names(pred_sim))){
lines(cumsum(pred_sim[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))
#add nam parents phenotype
}
text(x = 250, paste("mean:", round(mean(sim_phenos),2 )), y = max_y)
text(x = 250, paste("max:", round(max(sim_phenos),2 )), y = max_y -1*((max_y-min_y)*0.05))
text(x = 250, paste("min:", round(min(sim_phenos),2 )), y = max_y -2*((max_y-min_y)*0.05))
text(x = 250, paste("var:", round(var(sim_phenos),2 )), y = max_y -3*((max_y-min_y)*0.05))
text(x = 250, paste("95th quantile:", round(quantile(sim_phenos, probs = 0.95),2 )), y = max_y -4*((max_y-min_y)*0.05))
#real phenos
plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
ylab = "cumulative marker effects along chromosome", xlab = "marker", main = "Real offspring")
for(k in 1:length(row.names(pred_real))){
lines(cumsum(pred_real[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))
}
lines(cumsum(parent_exp[1,]), col = "blue", lwd = 5)
lines(cumsum(parent_exp[2,]), col = "red", lwd = 5)
text(x = 250, paste("mean:", round(mean(real_phenos),2 )), y = max_y)
text(x = 250, paste("max:", round(max(real_phenos),2 )), y = max_y -1*((max_y-min_y)*0.05))
text(x = 250, paste("min:", round(min(real_phenos),2 )), y = max_y -2*((max_y-min_y)*0.05))
text(x = 250, paste("var:", round(var(real_phenos),2 )), y = max_y -3*((max_y-min_y)*0.05))
text(x = 250, paste("95th quantile:", round(quantile(real_phenos, probs = 0.95),2 )), y = max_y -4*((max_y-min_y)*0.05))
legend("bottomright", legend = c("B73 traits", paste(populations[populations$pop == 1, "parent"], "traits"),
"offspring traits"), col = c("blue","red","black"), lty = 1, lwd = c(3,3,1))
dev.off()
}
}
write.csv(rrblup_preds, "../stats/pheno_prediction/rrBLUP_mrk_effects.csv", row.names = FALSE)
write.csv(real_preds, "../stats/pheno_prediction/real_preds.csv", row.names = FALSE)
write.csv(sim_preds, "../stats/pheno_prediction/sim_preds.csv", row.names = FALSE)
write.csv(real_summary, "../stats/pheno_prediction/real_summary.csv", row.names = FALSE)
write.csv(sim_summary, "../stats/pheno_prediction/sim_summary.csv", row.names = FALSE)
write.csv(NAM_pheno_reduced, "../stats/pheno_prediction/NAM_pheno_reduced.csv", row.names = FALSE)
##todo: calc prediction accuracy on real phenos
##model comparison similar to john et al comparison of classical and ml methods 2022
##-> similar model ranking? + overall accuracy + feature usage for prediction as three outcomes
##rrblup for marker effects -> sum up marker effects for total trait value and compare mean trait value of best
##performing cross with best performing real pop or do mse etc.
##gblup for genotype effects -> what do genotype effects imply
##xgboost feature importance: small number of always important features? ifnot, might not be usfeul
##cnn window approach: conserved/consistently important regions for features? ifnot, might not be useful
#-> can further information about breeding be gained from snp importance? if not, choose best performing model
#discussion
#sim phenos
plot(c(),xlim = c(0,marker_num), ylim = c(min_y, max_y),
ylab = "cumulative marker effects along chromosome", xlab = "marker", main = "Simulated offspring")
for(k in 1:length(row.names(pred_sim))){
lines(cumsum(pred_sim[k,])+intercept, col = rgb(red = 0.1, green = 0.1, blue = 0.1, alpha = 0.7))
#add nam parents phenotype
}
library(randomForest)
library(xgboost)
library(caret)
library(zoo)
source("stat_functions.R")
#train rf on simulated offspring phenotype with "ground truth" marker effects, test on real phenotypes
#to validate that pipeline (genotype simualtion) and model (prediction on parent crosses) accurately predicts phenotype
#1. simulate parents and offspring (sim_sim_pops.py)
#2. calculate offspring trait parameters with estimated marker effects
#3. train rf on features of simulated parents (e.g. correlation of traits along chromosome)
#4. test rf on phenotypes of real population
#load sim geno + marker effects
mrk_eff <- read.csv("../stats/pheno_prediction/rrBLUP_mrk_effects_all.csv")
effects <- mrk_eff$effect
intercept <- mrk_eff$intercept[1]
#read populations
populations <- read.csv("../data/sim_data/populations.csv")
#read genmap
genmap <- read.csv("../data/sim_data/B73_genmap.csv")
#read real parent genotypes
real_parent_add <- read.csv("../data/sim_data/NAM_parent_add.csv")
real_parent_add <- real_parent_add[,c("pop","parent",genmap$Marker)]
#read real parent phenotypes
real_parent_phenos <- read.csv("../stats/pheno_prediction/real_preds_all.csv")
#read simulated populations
sim_populations <- read.csv("../sim_output/parent_sim/sim_populations.csv")
#read simulated offspring genotypes
#sim_offspring_genos <- read.csv("../data/sim_output/parent_sim/sim_offspring_genos.csv)
sim_summary <- data.frame("pop" = sim_populations$pop, "trait_mean" = NA, "trait_max" = NA,
"trait_min" = NA, "trait_var" = NA, "trait_95_perc" = NA)
real_summary <- data.frame("pop" = populations$pop, "trait_mean" = NA, "trait_max" = NA,
"trait_min" = NA, "trait_var" = NA, "trait_95_perc" = NA)
#calc sim pop traits with mrk effects
for(i in sim_populations$pop){
sim_add_i <- read.csv(paste("../sim_output/parent_sim/additive_encoding/add_",i,".csv", sep = ""))
sim_add_i <- sim_add_i[,genmap$Marker]
#calculate simulated offspring phenotypes
sim_traits <- t(apply(sim_add_i,1,function(x){effects*x}))
sim_phenos <- rowSums(sim_traits) + intercept
#calc trait dist parameters
sim_summary[sim_summary$pop == i, c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc")] <- c(
mean(sim_phenos), max(sim_phenos), min(sim_phenos), var(sim_phenos), quantile(sim_phenos, probs = 0.95)
)
}
#calc real pop traits with mrk effects
for(i in populations$pop){
real_add_i <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
real_add_i <- real_add_i[,genmap$Marker]
#calc real offspring phenotypes
real_traits <- t(apply(real_add_i,1,function(x){effects*x}))
real_phenos <- rowSums(real_traits) + intercept
real_summary[real_summary$pop == i, c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc")] <- c(
mean(real_phenos), max(real_phenos), min(real_phenos), var(real_phenos), quantile(real_phenos, probs = 0.95)
)
}
#load/create df where pop is associated with parent 1 and 2 then take traits$pop %in% c(parent1, parent2)
real_pops <- data.frame("pop" = populations$pop, "parent_1" = "B73", "parent_2" = populations$parent)
sim_parents <- strsplit(sim_populations[, "name"], "_")
sim_pops <- data.frame("pop" = sim_populations$pop, "parent_1" = sapply(sim_parents, "[[", 1),
"parent_2" = sapply(sim_parents, "[[", 2))
#calc traits on real genos
real_traits <- cbind(real_parent_add[,c("pop", "parent")],
t(apply(real_parent_add[,!colnames(real_parent_add) %in% c("pop","parent")],
1,function(x){effects*x})))
#calc traits on sim genos (same parental traits, different correlation)
#sim_traits <- cbind(sim_parent_add[,c("pop", "parent")],
#                    t(apply(sim_parent_add[,!colnames(sim_parent_add) %in% c("pop", "parent")],
#                            1,function(x){effects*x})))
#calc rolling correlations on traits
real_cors <- calc_trait_cor(traits = real_traits, populations = real_pops, window_size = 20, genmap = genmap)[-1]
sim_cors <- calc_trait_cor(traits = real_traits, populations = sim_pops, window_size = 20, genmap = genmap)[-1]
sim_pheno <- sim_summary$trait_95_perc
#train model on simulated cors and phenotypes
rf <- randomForest(x = sim_cors, y = sim_pheno, importance = TRUE, ntree = 500, mtry = 17)
varImpPlot(rf)
#predict on real trait cors
real_predict <- predict(rf, real_cors)
#rmse of real pheno and predicted phenos of rf on real parental trait cors
real_pheno <- real_summary$trait_95_perc
sqrt(mean((real_predict - real_pheno)^2))
preds <- cbind(real_predict, real_pheno)
var(preds[,1])
var(preds[,2])
##todo: add recomb stats to validation stats script, debug different recomb stats
sim_train_x <-  sim_cors[1:50,]
sim_train_y <- sim_pheno[1:50]
sim_test_x <- sim_cors[51:96,]
sim_test_y <- sim_pheno[51:96]
rf_sim <- randomForest(x = sim_train_x, y = sim_train_y, importance = TRUE)
varImpPlot(rf_sim)
sim_predict <- predict(rf_sim, sim_test_x)
#rmse
sqrt(mean((sim_predict - sim_test_y)^2))
sim_preds <- cbind(sim_predict, sim_test_y)
var(sim_preds[,1])
var(sim_preds[,2])
##xgboost
# Convert data to DMatrix format
dtrain <- xgb.DMatrix(data = as.matrix(sim_train_x), label = sim_train_y)
dtest <- xgb.DMatrix(data = as.matrix(sim_test_x), label = sim_test_y)
plot(preds[,1], preds[,2])
cor.test(preds[,1], preds[,2])
##xgboost
# Convert data to DMatrix format
dtrain <- xgb.DMatrix(data = as.matrix(sim_train_x), label = sim_train_y)
dtest <- xgb.DMatrix(data = as.matrix(sim_test_x), label = sim_test_y)
# Define parameters
params <- list(
objective = "reg:squarederror",
eval_metric = "rmse",
eta = 0.1,
max_depth = 6,
subsample = 0.8,
colsample_bytree = 0.8,
verbose = 1,
lambda = 5,
alpha = 1
)
# Train the XGBoost model
xgb_model <- xgb.train(params = params, data = dtrain, nrounds = 100, watchlist = list(train = dtrain, test = dtest))
# Train the XGBoost model
xgb_model <- xgb.train(params = params, data = dtrain, nrounds = 1000, watchlist = list(train = dtrain, test = dtest))
View(xgb_model)
xgb_model
sim_cors
sim_cors$target <- sim_pheno
real_cors$target <- real_pheno
folds <- createFolds(sim_cors$target, k = 5, list = TRUE, returnTrain = FALSE)
View(folds)
param_grid <- expand.grid(
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
subsample = c(0.8, 1.0),
colsample_bytree = c(0.8, 1.0),
gamma = c(0, 1, 5),
lambda = c(0, 1, 5),
alpha = c(0, 1, 5),
min_child_weight = c(1, 5, 10)
)
control_params <- trainControl(method = "cv", number = 5, index = folds)
?trainControl
param_grid <- expand.grid(
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
subsample = c(0.8, 1.0),
colsample_bytree = c(0.8, 1.0),
gamma = c(0, 1, 5),
lambda = c(0, 1, 5),
alpha = c(0, 1, 5),
min_child_weight = c(1, 5, 10)
)
control_params <- trainControl(method = "cv", number = 5, index = folds)
grid_result <- tuneGrid(
method = "xgbTree",
trainData = sim_cors,
trControl = control_params,
tuneGrid = param_grid,
metric = "RMSE"
)
?tuneGrid
?train
grid_result <- train(
method = "xgbTree",
trainData = sim_cors,
trControl = control_params,
tuneGrid = param_grid,
metric = "RMSE"
)
sim_cors[,-c("target")]
grid_result <- train(
method = "xgbTree",
x = sim_cors[,!colnames(sim_cors) %in% c("target")],
y = sim_cors$target,
trControl = control_params,
tuneGrid = param_grid,
metric = "RMSE"
)
param_grid
param_grid <- expand.grid(
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
subsample = c(0.8, 1.0),
colsample_bytree = c(0.8, 1.0),
gamma = c(0, 1, 5),
lambda = c(0, 1, 5),
alpha = c(0, 1, 5),
min_child_weight = c(1, 5, 10),
nrounds = 100
)
control_params <- trainControl(method = "cv", number = 5, index = folds)
grid_result <- train(
method = "xgbTree",
x = sim_cors[,!colnames(sim_cors) %in% c("target")],
y = sim_cors$target,
trControl = control_params,
tuneGrid = param_grid,
metric = "RMSE"
)
?trainControl()
param_grid <- expand.grid(
eta = c(0.01, 0.1, 0.3),
max_depth = c(3, 6, 9),
subsample = c(0.8, 1.0),
colsample_bytree = c(0.8, 1.0),
gamma = c(0, 1, 5),
#lambda = c(0, 1, 5),
#alpha = c(0, 1, 5),
min_child_weight = c(1, 5, 10),
nrounds = 100
)
control_params <- trainControl(method = "cv", number = 5, index = folds)
grid_result <- train(
method = "xgbTree",
x = sim_cors[,!colnames(sim_cors) %in% c("target")],
y = sim_cors$target,
trControl = control_params,
tuneGrid = param_grid,
metric = "RMSE"
)
##xgboost
# Convert data to DMatrix format
dtrain <- xgb.DMatrix(data = as.matrix(sim_train_x), label = sim_train_y)
View(grid_result)
grid_result$results
grid_result$results -> results
View(results)
?train
names(getModelInfo())
?getModelInfo
?getModelInfo(model = "xgbTree")
getModelInfo(model = "xgbTree")
train
?train
grid_result <- train(
method = "xgbTree",
x = sim_cors[,!colnames(sim_cors) %in% c("target")],
y = sim_cors$target,
trControl = trainControl(),
tuneGrid = param_grid,
metric = "RMSE"
)
View(grid_result)
grid_result[["results"]]
View(grid_result[["results"]])
predict(grid_result)
predict(grid_result, real_cors)
predict(grid_result, real_cors[,1:10])
predict(grid_result, real_cors[,!colnames(real_cors) %in% c("target")])
best_xgpred <- predict(grid_result, real_cors[,!colnames(real_cors) %in% c("target")])
sqrt(mean((best_xgpred - real_pheno)^2))
pred <- cbind(best_xgpred, real_pheno)
View(pred)
sim_phenos
#calc sim pop traits with mrk effects
for(i in sim_populations$pop){
sim_add_i <- read.csv(paste("../sim_output/parent_sim/additive_encoding/add_",i,".csv", sep = ""))
sim_add_i <- sim_add_i[,genmap$Marker]
#calculate simulated offspring phenotypes
sim_traits <- t(apply(sim_add_i,1,function(x){effects*x}))
sim_phenos <- rowSums(sim_traits) + intercept
#calc trait dist parameters
sim_summary[sim_summary$pop == i, c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc")] <- c(
mean(sim_phenos), max(sim_phenos), min(sim_phenos), var(sim_phenos), quantile(sim_phenos, probs = 0.95)
)
}
write.csv(sim_summary, "../stats/pheno_prediction/sim_summary_all.csv", row.names = FALSE)
#calc real pop traits with mrk effects
for(i in populations$pop){
real_add_i <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
real_add_i <- real_add_i[,genmap$Marker]
#calc real offspring phenotypes
real_traits <- t(apply(real_add_i,1,function(x){effects*x}))
real_phenos <- rowSums(real_traits) + intercept
real_summary[real_summary$pop == i, c("trait_mean", "trait_max", "trait_min", "trait_var", "trait_95_perc")] <- c(
mean(real_phenos), max(real_phenos), min(real_phenos), var(real_phenos), quantile(real_phenos, probs = 0.95)
)
}
write.csv(real_summary, "../stats/pheno_prediction/real_summary_all.csv", row.names = FALSE)
#calc rolling correlations on traits
real_cors <- calc_trait_cor(traits = real_traits, populations = real_pops, window_size = 20, genmap = genmap)[-1]
sim_cors <- calc_trait_cor(traits = real_traits, populations = sim_pops, window_size = 20, genmap = genmap)[-1]
write.csv(real_cors, "../stats/pheno_prediction/real_cors.csv", row.names = FALSE)
#load/create df where pop is associated with parent 1 and 2 then take traits$pop %in% c(parent1, parent2)
real_pops <- data.frame("pop" = populations$pop, "parent_1" = "B73", "parent_2" = populations$parent)
sim_parents <- strsplit(sim_populations[, "name"], "_")
sim_pops <- data.frame("pop" = sim_populations$pop, "parent_1" = sapply(sim_parents, "[[", 1),
"parent_2" = sapply(sim_parents, "[[", 2))
#calc traits on real genos
real_traits <- cbind(real_parent_add[,c("pop", "parent")],
t(apply(real_parent_add[,!colnames(real_parent_add) %in% c("pop","parent")],
1,function(x){effects*x})))
#calc traits on sim genos (same parental traits, different correlation)
#sim_traits <- cbind(sim_parent_add[,c("pop", "parent")],
#                    t(apply(sim_parent_add[,!colnames(sim_parent_add) %in% c("pop", "parent")],
#                            1,function(x){effects*x})))
#calc rolling correlations on traits
real_cors <- calc_trait_cor(traits = real_traits, populations = real_pops, window_size = 20, genmap = genmap)[-1]
sim_cors <- calc_trait_cor(traits = real_traits, populations = sim_pops, window_size = 20, genmap = genmap)[-1]
write.csv(real_cors, "../stats/pheno_prediction/real_cors.csv", row.names = FALSE)
write.csv(sim_cors, "../stats/pheno_prediction/sim_cors.csv", row.names = FALSE)
View(sim_cors)
real_train_x <-  real_cors[1:16,]
real_train_y <- real_pheno[1:16]
real_test_x <- real_cors[16:25,]
real_test_y <- real_pheno[16:25]
rf_real <- randomForest(x = real_train_x, y = real_train_y, importance = TRUE)
varImpPlot(rf_sim)
real_predict <- predict(rf_real, real_test_x)
sqrt(mean((real_predict - real_test_y)^2))
real_preds <- cbimd(real_predict, real_test_y)
real_preds <- cbind(real_predict, real_test_y)
var(real_preds[,1])
var(real_preds[,2])
