#read parental traits
parent_traits <- read.csv("../stats/pheno_prediction/parent_traits.csv")
#goal: rmse + correlation coeff + corr pval for pred + real for traits for trait mean + 95th perc for rf, xgboost, cnn, baseline.
traits <- c("silk", "tassel", "oil", "protein", "starch")
tasks <- c("trait_mean", "trait_95_perc")
pred_results <- data.frame("model" = NA, "task" = NA, "trait" = NA, "rmse" = NA, "corr" = NA,
"corr_p" = NA, "best_predict" = NA)
for(i in traits){
real_cors_i <- real_cors[real_cors$trait == i,!colnames(real_cors) %in% c("trait")]
sim_cors_i <- sim_cors[sim_cors$trait == i,!colnames(sim_cors) %in% c("trait")]
parent_traits_i <- parent_traits[parent_traits$trait == i,]
effects_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
intercept_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
for(j in tasks){
real_y <- real_summary[real_summary$trait == i, j]
sim_y <- sim_pops_summary[sim_pops_summary$trait == i, j]
model <- "RandomForest"
##random forest with default params
#train on sim cors
rf <- randomForest(x = sim_cors_i, y = sim_y)
#predict on real trait cors
rf_pred <- predict(rf, real_cors_i)
#create pred results
rmse <- sqrt(mean((rf_pred - real_y)^2))
corr <- cor.test(rf_pred, real_y)
best_predict <- which.max(rf_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/RandomForest/RF_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(rf_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
model <- "XGBoost"
##xgboost with best parametrization w.r.t. grid search (see below)
#get parametrization from running grid search once
params <- list(
objective = "reg:squarederror",
nrounds = 500,
max_depth = 3,
eta = 0.1,
gamma = 1,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.8
)
dtrain <- xgb.DMatrix(data = as.matrix(sim_cors_i), label = sim_y)
xgb <- xgboost(params = params, data = dtrain, nrounds = params$nrounds)
xgb_pred <- predict(xgb, as.matrix(real_cors_i))
#create pred results
rmse <- sqrt(mean((xgb_pred - real_y)^2))
corr <- cor.test(xgb_pred, real_y)
best_predict <- which.max(xgb_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/XGBoost/XGB_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(xgb_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
model <- "baseline"
##mean of parents for trait mean, 95th percentile binomial sampling parent markers
if(j == "trait_mean"){
mean_pred <- NULL
for(k in parent_traits_i$pop[-1]){
parent_cross <- parent_traits_i[parent_traits_i$pop %in% c(0,k),
!colnames(parent_traits_i) %in% c("parent","pop","trait")]
mean_pred <- c(mean_pred, mean(rowSums(parent_cross) + intercept_i))
}
rmse <- sqrt(mean((mean_pred - real_y)^2))
corr <- cor.test(mean_pred, real_y)
best_predict <- which.max(mean_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/baseline/BL_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(mean_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
}
if(j == "trait_95_perc"){
binom_pred <- NULL
for(k in parent_traits_i$pop[-1]){
binom_offspr <- NULL
for(l in 1:200){
sample_l <- sample(c(-1,1), size = length(effects_i), replace = TRUE, prob = c(0.5, 0.5))
binom_offspr <- c(binom_offspr, sum(effects_i*sample_l) + intercept_i)
}
binom_pred <- c(binom_pred, quantile(binom_offspr, probs = 0.95))
}
rmse <- sqrt(mean((binom_pred - real_y)^2))
corr <- cor.test(binom_pred, real_y)
best_predict <- which.max(binom_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/baseline/BL_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(binom_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
}
}
}
write.csv(pred_results[-1,], "../stats/pheno_prediction/results/pred_results_trees_BL.csv", row.names = FALSE)
library(randomForest)
library(xgboost)
library(caret)
#calculates trait values using marker effects calculated using all real populations at once
#calculates trait correlation among parental trait values for real and simulated populations
#trains rf and xgboost on simulated offspring phenotype with "ground truth" marker effects, test on real phenotypes
#to validate that pipeline (genotype simualtion) and model (prediction on parent crosses) accurately predicts phenotype
#1. simulate parents and offspring (sim_sim_pops.py)
#2. calculate offspring trait parameters with estimated marker effects
#3. train rf on features of simulated parents (e.g. correlation of traits along chromosome)
#4. test rf on phenotypes of real population
#load sim geno + marker effects
rrblup_preds_all <- read.csv("../stats/pheno_prediction/rrBLUP_mrk_effects_all.csv")
#read trait summary stats sim+real
sim_pops_summary <- read.csv("../stats/pheno_prediction/sim_pops_summary.csv")
real_summary <- read.csv("../stats/pheno_prediction/real_summary.csv")
#read correlation features
sim_cors <- read.csv("../stats/pheno_prediction/sim_cors.csv")
real_cors <- read.csv("../stats/pheno_prediction/real_cors.csv")
#read parental traits
parent_traits <- read.csv("../stats/pheno_prediction/parent_traits.csv")
#goal: rmse + correlation coeff + corr pval for pred + real for traits for trait mean + 95th perc for rf, xgboost, cnn, baseline.
traits <- c("silk", "tassel", "oil", "protein", "starch")
tasks <- c("trait_mean", "trait_95_perc")
pred_results <- data.frame("model" = NA, "task" = NA, "trait" = NA, "rmse" = NA, "corr" = NA,
"corr_p" = NA, "best_predict" = NA)
for(i in traits){
real_cors_i <- real_cors[real_cors$trait == i,!colnames(real_cors) %in% c("trait")]
sim_cors_i <- sim_cors[sim_cors$trait == i,!colnames(sim_cors) %in% c("trait")]
parent_traits_i <- parent_traits[parent_traits$trait == i,]
effects_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
intercept_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
for(j in tasks){
real_y <- real_summary[real_summary$trait == i, j]
sim_y <- sim_pops_summary[sim_pops_summary$trait == i, j]
model <- "RandomForest"
##random forest with default params
#train on sim cors
rf <- randomForest(x = sim_cors_i, y = sim_y)
#predict on real trait cors
rf_pred <- predict(rf, real_cors_i)
#create pred results
rmse <- sqrt(mean((rf_pred - real_y)^2))
corr <- cor.test(rf_pred, real_y)
best_predict <- which.max(rf_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/RandomForest/RF_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(rf_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
model <- "XGBoost"
##xgboost with best parametrization w.r.t. grid search (see below)
#get parametrization from running grid search once
params <- list(
objective = "reg:squarederror",
nrounds = 500,
max_depth = 3,
eta = 0.1,
gamma = 1,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.8
)
dtrain <- xgb.DMatrix(data = as.matrix(sim_cors_i), label = sim_y)
xgb <- xgboost(params = params, data = dtrain, nrounds = params$nrounds)
xgb_pred <- predict(xgb, as.matrix(real_cors_i))
#create pred results
rmse <- sqrt(mean((xgb_pred - real_y)^2))
corr <- cor.test(xgb_pred, real_y)
best_predict <- which.max(xgb_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/XGBoost/XGB_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(xgb_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
model <- "baseline"
##mean of parents for trait mean, 95th percentile binomial sampling parent markers
if(j == "trait_mean"){
mean_pred <- NULL
for(k in parent_traits_i$pop[-1]){
parent_cross <- parent_traits_i[parent_traits_i$pop %in% c(0,k),
!colnames(parent_traits_i) %in% c("parent","pop","trait")]
mean_pred <- c(mean_pred, mean(rowSums(parent_cross) + intercept_i))
}
rmse <- sqrt(mean((mean_pred - real_y)^2))
corr <- cor.test(mean_pred, real_y)
best_predict <- which.max(mean_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/baseline/BL_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(mean_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
}
if(j == "trait_95_perc"){
binom_pred <- NULL
for(k in parent_traits_i$pop[-1]){
binom_offspr <- NULL
for(l in 1:200){
sample_l <- sample(c(-1,1), size = length(effects_i), replace = TRUE, prob = c(0.5, 0.5))
binom_offspr <- c(binom_offspr, sum(effects_i*sample_l) + intercept_i)
}
binom_pred <- c(binom_pred, quantile(binom_offspr, probs = 0.95))
}
rmse <- sqrt(mean((binom_pred - real_y)^2))
corr <- cor.test(binom_pred, real_y)
best_predict <- which.max(binom_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/baseline/BL_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(binom_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
}
}
}
library(randomForest)
library(xgboost)
library(caret)
#calculates trait values using marker effects calculated using all real populations at once
#calculates trait correlation among parental trait values for real and simulated populations
#trains rf and xgboost on simulated offspring phenotype with "ground truth" marker effects, test on real phenotypes
#to validate that pipeline (genotype simualtion) and model (prediction on parent crosses) accurately predicts phenotype
#1. simulate parents and offspring (sim_sim_pops.py)
#2. calculate offspring trait parameters with estimated marker effects
#3. train rf on features of simulated parents (e.g. correlation of traits along chromosome)
#4. test rf on phenotypes of real population
#load sim geno + marker effects
rrblup_preds_all <- read.csv("../stats/pheno_prediction/rrBLUP_mrk_effects_all.csv")
#read trait summary stats sim+real
sim_pops_summary <- read.csv("../stats/pheno_prediction/sim_pops_summary.csv")
real_summary <- read.csv("../stats/pheno_prediction/real_summary.csv")
#read correlation features
sim_cors <- read.csv("../stats/pheno_prediction/sim_cors.csv")
real_cors <- read.csv("../stats/pheno_prediction/real_cors.csv")
#read parental traits
parent_traits <- read.csv("../stats/pheno_prediction/parent_traits.csv")
#goal: rmse + correlation coeff + corr pval for pred + real for traits for trait mean + 95th perc for rf, xgboost, cnn, baseline.
traits <- c("silk", "tassel", "oil", "protein", "starch")
tasks <- c("trait_mean", "trait_95_perc")
pred_results <- data.frame("model" = NA, "task" = NA, "trait" = NA, "rmse" = NA, "corr" = NA,
"corr_p" = NA, "best_predict" = NA)
for(i in traits){
real_cors_i <- real_cors[real_cors$trait == i,!colnames(real_cors) %in% c("trait")]
sim_cors_i <- sim_cors[sim_cors$trait == i,!colnames(sim_cors) %in% c("trait")]
parent_traits_i <- parent_traits[parent_traits$trait == i,]
effects_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
intercept_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
for(j in tasks){
real_y <- real_summary[real_summary$trait == i, j]
sim_y <- sim_pops_summary[sim_pops_summary$trait == i, j]
model <- "RandomForest"
##random forest with default params
#train on sim cors
rf <- randomForest(x = sim_cors_i, y = sim_y)
#predict on real trait cors
rf_pred <- predict(rf, real_cors_i)
#create pred results
rmse <- sqrt(mean((rf_pred - real_y)^2))
corr <- cor.test(rf_pred, real_y)
best_predict <- which.max(rf_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/RandomForest/RF_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(rf_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
model <- "XGBoost"
##xgboost with best parametrization w.r.t. grid search (see below)
#get parametrization from running grid search once
params <- list(
objective = "reg:squarederror",
nrounds = 500,
max_depth = 3,
eta = 0.1,
gamma = 1,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.8
)
dtrain <- xgb.DMatrix(data = as.matrix(sim_cors_i), label = sim_y)
xgb <- xgboost(params = params, data = dtrain, nrounds = params$nrounds)
xgb_pred <- predict(xgb, as.matrix(real_cors_i))
#create pred results
rmse <- sqrt(mean((xgb_pred - real_y)^2))
corr <- cor.test(xgb_pred, real_y)
best_predict <- which.max(xgb_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/XGBoost/XGB_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(xgb_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
model <- "baseline"
##mean of parents for trait mean, 95th percentile binomial sampling parent markers
if(j == "trait_mean"){
mean_pred <- NULL
for(k in parent_traits_i$pop[-1]){
parent_cross <- parent_traits_i[parent_traits_i$pop %in% c(0,k),
!colnames(parent_traits_i) %in% c("parent","pop","trait")]
mean_pred <- c(mean_pred, mean(rowSums(parent_cross) + intercept_i))
}
rmse <- sqrt(mean((mean_pred - real_y)^2))
corr <- cor.test(mean_pred, real_y)
best_predict <- which.max(mean_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/baseline/BL_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(mean_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
}
if(j == "trait_95_perc"){
binom_pred <- NULL
for(k in parent_traits_i$pop[-1]){
binom_offspr <- NULL
for(l in 1:200){
sample_l <- sample(c(-1,1), size = length(effects_i), replace = TRUE, prob = c(0.5, 0.5))
binom_offspr <- c(binom_offspr, sum(effects_i*sample_l) + intercept_i)
}
binom_pred <- c(binom_pred, quantile(binom_offspr, probs = 0.95))
}
rmse <- sqrt(mean((binom_pred - real_y)^2))
corr <- cor.test(binom_pred, real_y)
best_predict <- which.max(binom_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
png(paste("../plots/prediction_plots/baseline/BL_",j,"_",i,".png",sep = ""),width = 900, height = 768)
plot(binom_pred, real_y, col = "blue", pch = 16, cex = 1.5, xlab = "Predicted phenotype", ylab = "True phenotype")
dev.off()
}
}
}
#construct melted tables of raw and imputed original data genotypes to test data quality
pop_1_enc <- read.csv("../../data/test_data/pop_1_enc.csv")
##----
#genotpyes encoded (unexpected encoding, see test_scripts/test_imputed_data.R)
#reduce nam offspring genotypes to subset
#load NAM genos imputed
offspring_genos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_genos_imputed_20090807.xlsx")
library(openxlsx)
library(data.table)
##----
#genotpyes encoded (unexpected encoding, see test_scripts/test_imputed_data.R)
#reduce nam offspring genotypes to subset
#load NAM genos imputed
offspring_genos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_genos_imputed_20090807.xlsx")
#generate indices for 10 each of first 5 RILs
index <- rep(1:10) + rep(c(0,100,200,300,400), each = 10) + 2
#get pop 1 genotypes
pop_1_genos <- offspring_genos[c(3:196),]
colnames(pop_1_genos) <- offspring_genos[2,]
pop_1_genos[,c(2:1107)] <- sapply(pop_1_genos[,c(2:1107)], as.numeric)
#pop_1_genos[pop_1_genos == 1.5] <- 1.0
#pop_1_genos[pop_1_genos == 0.5] <- 1.0
write.csv(pop_1_genos, "../data/test_data/pop_1_enc.csv", row.names = FALSE)
#construct melted tables of raw and imputed original data genotypes to test data quality
pop_1_enc <- read.csv("../../data/test_data/pop_1_enc.csv")
library(xtable)
library(stringr)
pred_results_trees <- read.csv("../stats/pheno_prediction/results/pred_results_trees_BL.csv")
pred_results_CNN <- read.csv("../stats/pheno_prediction/results/pred_results_CNN.csv")
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
#trait mean
trees_mean <- pred_results_trees[pred_results_trees$task == "trait_mean",]
trees_mean$model <- ifelse(trees_mean$model == "baseline", "Baseline", trees_mean$model)
CNN_mean <- pred_results_CNN[pred_results_CNN$task == "trait_mean",]
mean_CNN_res <- CNN_mean[CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr"),]
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
View(mean_CNN_res)
View(mean_CNN_app)
mean_app$trait
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
trait_order <- c("Silk", "Tassel", "Oil", "Protein", "Starch")
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$model <- ifelse(mean_CNN_app$model == "p1_p2", "CNN(p1,p2)",
ifelse(mean_CNN_app$model == "p1_p2_rate", "CNN(p1,p2,rate)",
ifelse(mean_CNN_app$model == "corr", "CNN(corr)", mean_CNN_app$model)))
mean_CNN_app <- mean_CNN_app[,!colnames(mean_CNN_app) %in% "task"]
colnames(mean_CNN_app) <- c("Model", "Trait", "RMSE", "Corr. coef.", "p Corr.", "Best predict")
print(xtable(mean_CNN_app), include.rownames = FALSE)
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$model <- ifelse(mean_CNN_app$model == "p1_p2_cM", "CNN(p1,p2,cM)",
ifelse(mean_CNN_app$model == "p1_p2_position", "CNN(p1,p2,position)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff", "CNN(p1,p2,interval)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff_rate", "CNN(p1,p2,interval,rate)", mean_CNN_app$model))))
mean_CNN_app <- mean_CNN_app[,!colnames(mean_CNN_app) %in% "task"]
colnames(mean_CNN_app) <- c("Model", "Trait", "RMSE", "Corr. coef.", "p Corr.", "Best predict")
print(xtable(mean_CNN_app), include.rownames = FALSE)
mean_CNN_app$`Corr. coef.`<- ifelse(is.na(mean_CNN_app$`Corr. coef.`) ,"NA",mean_CNN_app$`Corr. coef.`)
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$`Corr. coef.`<- ifelse(is.na(mean_CNN_app$`Corr. coef.`) ,"NA",mean_CNN_app$`Corr. coef.`)
mean_CNN_app$model <- ifelse(mean_CNN_app$model == "p1_p2_cM", "CNN(p1,p2,cM)",
ifelse(mean_CNN_app$model == "p1_p2_position", "CNN(p1,p2,position)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff", "CNN(p1,p2,interval)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff_rate", "CNN(p1,p2,interval,rate)", mean_CNN_app$model))))
mean_CNN_app <- mean_CNN_app[,!colnames(mean_CNN_app) %in% "task"]
colnames(mean_CNN_app) <- c("Model", "Trait", "RMSE", "Corr. coef.", "p Corr.", "Best predict")
print(xtable(mean_CNN_app), include.rownames = FALSE)
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$`Corr. coef.`<- ifelse(is.na(mean_CNN_app$`Corr. coef.`) ,"NA",mean_CNN_app$`Corr. coef.`)
mean_CNN_app$model <- ifelse(mean_CNN_app$model == "p1_p2_cM", "CNN(p1,p2,cM)",
ifelse(mean_CNN_app$model == "p1_p2_position", "CNN(p1,p2,position)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff", "CNN(p1,p2,interval)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff_rate", "CNN(p1,p2,interval,rate)", mean_CNN_app$model))))
mean_CNN_app <- mean_CNN_app[,!colnames(mean_CNN_app) %in% "task"]
colnames(mean_CNN_app) <- c("Model", "Trait", "RMSE", "Corr. coef.", "p Corr.", "Best predict")
print(xtable(mean_CNN_app), include.rownames = FALSE)
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$`Corr. coef.`<- ifelse(is.na(mean_CNN_app$`Corr. coef.`) ,"NA",mean_CNN_app$`Corr. coef.`)
ifelse(is.na(mean_CNN_app$`Corr. coef.`) ,"NA",mean_CNN_app$`Corr. coef.`)
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$`Corr. coef.`<- ifelse(is.na(mean_CNN_app$cprr) ,"NA",mean_CNN_app$corr)
mean_CNN_app$model <- ifelse(mean_CNN_app$model == "p1_p2_cM", "CNN(p1,p2,cM)",
ifelse(mean_CNN_app$model == "p1_p2_position", "CNN(p1,p2,position)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff", "CNN(p1,p2,interval)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff_rate", "CNN(p1,p2,interval,rate)", mean_CNN_app$model))))
mean_CNN_app <- mean_CNN_app[,!colnames(mean_CNN_app) %in% "task"]
colnames(mean_CNN_app) <- c("Model", "Trait", "RMSE", "Corr. coef.", "p Corr.", "Best predict")
print(xtable(mean_CNN_app), include.rownames = FALSE)
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$corr <- ifelse(is.na(mean_CNN_app$cprr) ,"NA",mean_CNN_app$corr)
mean_CNN_app$model <- ifelse(mean_CNN_app$model == "p1_p2_cM", "CNN(p1,p2,cM)",
ifelse(mean_CNN_app$model == "p1_p2_position", "CNN(p1,p2,position)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff", "CNN(p1,p2,interval)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff_rate", "CNN(p1,p2,interval,rate)", mean_CNN_app$model))))
mean_CNN_app <- mean_CNN_app[,!colnames(mean_CNN_app) %in% "task"]
colnames(mean_CNN_app) <- c("Model", "Trait", "RMSE", "Corr. coef.", "p Corr.", "Best predict")
print(xtable(mean_CNN_app), include.rownames = FALSE)
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$corr <- ifelse(is.na(mean_CNN_app$cprr) ,"NA",mean_CNN_app$corr)
mean_CNN_app <- CNN_mean[!(CNN_mean$model %in% c("p1_p2","p1_p2_rate", "corr")),]
mean_CNN_app$trait <- str_to_title(mean_CNN_app$trait)
mean_CNN_app$trait <- factor(mean_CNN_app$trait, levels = trait_order)
mean_CNN_app <- mean_CNN_app[order(mean_CNN_app[,"trait"]),]
mean_CNN_app$best_predict <- gsub("(?i)FALSE", "No", mean_CNN_app$best_predict)
mean_CNN_app$best_predict <- gsub("(?i)TRUE", "Yes", mean_CNN_app$best_predict)
mean_CNN_app$corr <- ifelse(is.na(mean_CNN_app$corr) ,"NA",mean_CNN_app$corr)
mean_CNN_app$model <- ifelse(mean_CNN_app$model == "p1_p2_cM", "CNN(p1,p2,cM)",
ifelse(mean_CNN_app$model == "p1_p2_position", "CNN(p1,p2,position)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff", "CNN(p1,p2,interval)",
ifelse(mean_CNN_app$model == "p1_p2_pos_diff_rate", "CNN(p1,p2,interval,rate)", mean_CNN_app$model))))
mean_CNN_app <- mean_CNN_app[,!colnames(mean_CNN_app) %in% "task"]
colnames(mean_CNN_app) <- c("Model", "Trait", "RMSE", "Corr. coef.", "p Corr.", "Best predict")
print(xtable(mean_CNN_app), include.rownames = FALSE)
trees_95 <- pred_results_trees[pred_results_trees$task == "trait_95_perc",]
trees_95$model <- ifelse(trees_95$model == "baseline", "Baseline", trees_mean$model)
CNN_95 <- pred_results_CNN[pred_results_CNN$task == "trait_95_perc",]
CNN_95_res <- CNN_95[CNN_95$model %in% c("p1_p2","p1_p2_rate", "corr"),]
CNN_95_app <- CNN_95[!(CNN_95$model %in% c("p1_p2","p1_p2_rate", "corr")),]
CNN_95_app <- CNN_95[!(CNN_95$model %in% c("p1_p2","p1_p2_rate", "corr")),]
CNN_95_app$trait <- str_to_title(CNN_95_app$trait)
CNN_95_app$trait <- factor(CNN_95_app$trait, levels = trait_order)
CNN_95_app <- CNN_95_app[order(CNN_95_app[,"trait"]),]
CNN_95_app$best_predict <- gsub("(?i)FALSE", "No", CNN_95_app$best_predict)
CNN_95_app$best_predict <- gsub("(?i)TRUE", "Yes", CNN_95_app$best_predict)
CNN_95_app$corr <- ifelse(is.na(CNN_95_app$corr) ,"NA",CNN_95_app$corr)
CNN_95_app$model <- ifelse(CNN_95_app$model == "p1_p2_cM", "CNN(p1,p2,cM)",
ifelse(CNN_95_app$model == "p1_p2_position", "CNN(p1,p2,position)",
ifelse(CNN_95_app$model == "p1_p2_pos_diff", "CNN(p1,p2,interval)",
ifelse(CNN_95_app$model == "p1_p2_pos_diff_rate", "CNN(p1,p2,interval,rate)", CNN_95_app$model))))
CNN_95_app <- CNN_95_app[,!colnames(CNN_95_app) %in% "task"]
colnames(CNN_95_app) <- c("Model", "Trait", "RMSE", "Corr. coef.", "p Corr.", "Best predict")
print(xtable(CNN_95_app), include.rownames = FALSE)
