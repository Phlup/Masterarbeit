pred_results <- data.frame("model" = NA, "task" = NA, "trait" = NA, "rmse" = NA, "corr" = NA,
"corr_p" = NA, "best_predict" = NA)
for(i in traits){
real_cors_i <- real_cors[real_cors$trait == i,!colnames(real_cors) %in% c("trait")]
sim_cors_i <- sim_cors[sim_cors$trait == i,!colnames(sim_cors) %in% c("trait")]
parent_traits_i <- parent_traits[parent_traits$trait == i,]
effects_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
intercept_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
for(j in tasks){
real_y <- real_summary[real_summary$trait == i, j]
sim_y <- sim_pops_summary[sim_pops_summary$trait == i, j]
model <- "RandomForest"
##random forest with default params
#train on sim cors
rf <- randomForest(x = sim_cors_i, y = sim_y)
#predict on real trait cors
rf_pred <- predict(rf, real_cors_i)
#create pred results
rmse <- sqrt(mean((rf_pred - real_y)^2))
corr <- cor.test(rf_pred, real_y)
best_predict <- which.max(rf_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
model <- "XGBoost"
##xgboost with best parametrization w.r.t. grid search (see below)
#get parametrization from running grid search once
params <- list(
objective = "reg:squarederror",
nrounds = 500,
max_depth = 3,
eta = 0.1,
gamma = 1,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.8
)
dtrain <- xgb.DMatrix(data = as.matrix(sim_cors_i), label = sim_y)
xgb <- xgboost(params = params, data = dtrain, nrounds = params$nrounds)
xgb_pred <- predict(xgb, as.matrix(real_cors_i))
#create pred results
rmse <- sqrt(mean((xgb_pred - real_y)^2))
corr <- cor.test(xgb_pred, real_y)
best_predict <- which.max(xgb_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
model <- "baseline"
##mean of parents for trait mean, 95th percentile binomial sampling parent markers
if(j == "trait_mean"){
mean_pred <- NULL
for(k in parent_traits_i$pop[-1]){
parent_cross <- parent_traits_i[parent_traits_i$pop %in% c(0,k),
!colnames(parent_traits_i) %in% c("parent","pop","trait")]
mean_pred <- c(mean_pred, mean(rowSums(parent_cross) + intercept_i))
}
rmse <- sqrt(mean((mean_pred - real_y)^2))
corr <- cor.test(mean_pred, real_y)
best_predict <- which.max(mean_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
}
if(j == "trait_95_perc"){
binom_pred <- NULL
for(k in parent_traits_i$pop[-1]){
binom_sample <- sample(c(-1,1), size = length(effects), replace = TRUE, prob = c(0.5, 0.5))
binom_pred <- c(binom_pred, sum(effects*binom_sample) + intercept_i)
}
rmse <- sqrt(mean((binom_pred - real_y)^2))
corr <- cor.test(binom_pred, real_y)
best_predict <- which.max(binom_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
}
}
}
View(pred_results)
xgb <- xgboost(params = params, data = dtrain)
traits <- c("silk", "tassel", "oil", "protein", "starch")
tasks <- c("trait_mean", "trait_95_perc")
pred_results <- data.frame("model" = NA, "task" = NA, "trait" = NA, "rmse" = NA, "corr" = NA,
"corr_p" = NA, "best_predict" = NA)
for(i in traits){
real_cors_i <- real_cors[real_cors$trait == i,!colnames(real_cors) %in% c("trait")]
sim_cors_i <- sim_cors[sim_cors$trait == i,!colnames(sim_cors) %in% c("trait")]
parent_traits_i <- parent_traits[parent_traits$trait == i,]
effects_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
intercept_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
for(j in tasks){
real_y <- real_summary[real_summary$trait == i, j]
sim_y <- sim_pops_summary[sim_pops_summary$trait == i, j]
model <- "RandomForest"
##random forest with default params
#train on sim cors
rf <- randomForest(x = sim_cors_i, y = sim_y)
#predict on real trait cors
rf_pred <- predict(rf, real_cors_i)
#create pred results
rmse <- sqrt(mean((rf_pred - real_y)^2))
corr <- cor.test(rf_pred, real_y)
best_predict <- which.max(rf_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
model <- "XGBoost"
##xgboost with best parametrization w.r.t. grid search (see below)
#get parametrization from running grid search once
params <- list(
objective = "reg:squarederror",
nrounds = 500,
max_depth = 3,
eta = 0.1,
gamma = 1,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.8
)
dtrain <- xgb.DMatrix(data = as.matrix(sim_cors_i), label = sim_y)
xgb <- xgboost(params = params, data = dtrain, nrounds = params$nrounds)
xgb_pred <- predict(xgb, as.matrix(real_cors_i))
#create pred results
rmse <- sqrt(mean((xgb_pred - real_y)^2))
corr <- cor.test(xgb_pred, real_y)
best_predict <- which.max(xgb_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
model <- "baseline"
##mean of parents for trait mean, 95th percentile binomial sampling parent markers
if(j == "trait_mean"){
mean_pred <- NULL
for(k in parent_traits_i$pop[-1]){
parent_cross <- parent_traits_i[parent_traits_i$pop %in% c(0,k),
!colnames(parent_traits_i) %in% c("parent","pop","trait")]
mean_pred <- c(mean_pred, mean(rowSums(parent_cross) + intercept_i))
}
rmse <- sqrt(mean((mean_pred - real_y)^2))
corr <- cor.test(mean_pred, real_y)
best_predict <- which.max(mean_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
}
if(j == "trait_95_perc"){
binom_pred <- NULL
for(k in parent_traits_i$pop[-1]){
binom_sample <- sample(c(-1,1), size = length(effects), replace = TRUE, prob = c(0.5, 0.5))
binom_pred <- c(binom_pred, sum(effects*binom_sample) + intercept_i)
}
rmse <- sqrt(mean((binom_pred - real_y)^2))
corr <- cor.test(binom_pred, real_y)
best_predict <- which.max(binom_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
}
}
}
View(rrblup_preds_all)
j <- "oil"
real_cors_i <- real_cors[real_cors$trait == i,!colnames(real_cors) %in% c("trait")]
sim_cors_i <- sim_cors[sim_cors$trait == i,!colnames(sim_cors) %in% c("trait")]
parent_traits_i <- parent_traits[parent_traits$trait == i,]
effects_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
intercept_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
real_y <- real_summary[real_summary$trait == i, j]
sim_y <- sim_pops_summary[sim_pops_summary$trait == i, j]
model <- "RandomForest"
##random forest with default params
#train on sim cors
rf <- randomForest(x = sim_cors_i, y = sim_y)
#predict on real trait cors
rf_pred <- predict(rf, real_cors_i)
#create pred results
rmse <- sqrt(mean((rf_pred - real_y)^2))
corr <- cor.test(rf_pred, real_y)
best_predict <- which.max(rf_pred) == which.max(real_y)
##random forest with default params
#train on sim cors
rf <- randomForest(x = sim_cors_i, y = sim_y)
#predict on real trait cors
rf_pred <- predict(rf, real_cors_i)
rf
model <- "XGBoost"
##xgboost with best parametrization w.r.t. grid search (see below)
#get parametrization from running grid search once
params <- list(
objective = "reg:squarederror",
nrounds = 500,
max_depth = 3,
eta = 0.1,
gamma = 1,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.8
)
dtrain <- xgb.DMatrix(data = as.matrix(sim_cors_i), label = sim_y)
j
i
i <- "oil"
j <- "trait_mean"
real_cors_i <- real_cors[real_cors$trait == i,!colnames(real_cors) %in% c("trait")]
sim_cors_i <- sim_cors[sim_cors$trait == i,!colnames(sim_cors) %in% c("trait")]
parent_traits_i <- parent_traits[parent_traits$trait == i,]
effects_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "effect"]
intercept_i <- rrblup_preds_all[rrblup_preds_all$trait == i, "intercept"][1]
real_y <- real_summary[real_summary$trait == i, j]
sim_y <- sim_pops_summary[sim_pops_summary$trait == i, j]
model <- "RandomForest"
##random forest with default params
#train on sim cors
rf <- randomForest(x = sim_cors_i, y = sim_y)
#predict on real trait cors
rf_pred <- predict(rf, real_cors_i)
#create pred results
rmse <- sqrt(mean((rf_pred - real_y)^2))
corr <- cor.test(rf_pred, real_y)
best_predict <- which.max(rf_pred) == which.max(real_y)
pred_results_i_j_k <- c(model, j, i, round(rmse, 3), round(corr$estimate, 3),
ifelse(corr$p.value < 0.001, "<0.001", round(corr$p.value,3)), best_predict)
pred_results <- rbind(pred_results, pred_results_i_j_k)
model <- "XGBoost"
##xgboost with best parametrization w.r.t. grid search (see below)
#get parametrization from running grid search once
params <- list(
objective = "reg:squarederror",
nrounds = 500,
max_depth = 3,
eta = 0.1,
gamma = 1,
colsample_bytree = 1,
min_child_weight = 5,
subsample = 0.8
)
dtrain <- xgb.DMatrix(data = as.matrix(sim_cors_i), label = sim_y)
xgb <- xgboost(params = params, data = dtrain, nrounds = params$nrounds)
xgb_pred <- predict(xgb, as.matrix(real_cors_i))
xgb_pred
real_cors_i
real_y
sim_cors_i
sim_y
xgb_pred <- predict(xgb, as.matrix(real_cors_i))
as.matrix(real_cors_i)
#read in sum stats to compare rec scenarios
recomb_stats <- read.csv("../stats/summary_stats/recomb_stats.csv")
View(recomb_stats)
mean(recomb_stats$mean_high)
mean(recomb_stats[,1:10])
mean(recomb_stats[,1:19])
mean(recomb_stats[,1:9])
recomb_stats[,1:9]
recomb_stats[,2:9]
apply(recomb_stats[,2:9], 2, mean)
sum_results <- data.frame("rec_param" = c("normal_rec", "high_rec", "zero_rec", "mean_rec"),
"het_sig" = NA, "mean_sd_phi" = NA, "geno_sig" = NA, "mean_sd_cramersV" = NA,
"ks_sig" = NA, "mean_sd_w1d" = NA, "ld_ks_sig" = NA, "mean_sd_ld_w1d" = NA,
"gc_sig" = NA, "mean_sd_gc" = NA, "rogers_sig" = NA, "rogers_cohens" = NA)
for(i in rec_param){
sum_stats <- read.csv(paste("../stats/summary_stats/sum_stats_",i,".csv", sep = ""))
het_sig <- paste(table(sum_stats$het_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$het_p)), sep = "")
het_phi <- paste("median: ", median(sum_stats$het_phi), ", IQR: ", IQR(sum_stats$het_phi),
", mean: ", signif(mean(sum_stats$het_phi),3),
" ± ", signif(sd(sum_stats$het_phi),3), sep = "")
geno_sig <- paste(table(sum_stats$geno_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$geno_p)), sep = "")
geno_cramersV <- paste("median: ", median(sum_stats$geno_cramersV), ", IQR: ", IQR(sum_stats$geno_cramersV),
", mean: ", signif(mean(sum_stats$geno_cramersV),3),
" ± ", signif(sd(sum_stats$geno_cramersV),3), sep = "")
ks_sig <- paste(table(sum_stats$ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ks_p)), sep = "")
w1d <- paste("median: ", median(sum_stats$w1d), ", IQR: ", IQR(sum_stats$w1d),
", mean: ", signif(mean(sum_stats$w1d),3),
" ± ", signif(sd(sum_stats$w1d),3), sep = "")
ld_ks_sig <- paste(table(sum_stats$ld_ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ld_ks_p)), sep = "")
ld_w1d <- paste("median: ", median(sum_stats$ld_w1d), ", IQR: ", IQR(sum_stats$ld_w1d),
", mean: ", signif(mean(sum_stats$ld_w1d),3),
" ± ", signif(sd(sum_stats$ld_w1d),3), sep = "")
gc_sig <- paste(table(sum_stats$gc_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$gc_p)), sep = "")
gc_cohens <- paste("median: ", median(sum_stats$gc_cohens), ", IQR: ", IQR(sum_stats$gc_cohens),
", mean: ", signif(mean(sum_stats$gc_cohens),3),
" ± ", signif(sd(sum_stats$gc_cohens),3), sep = "")
rogers_sig <- paste(table(sum_stats$rogers_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$rogers_p)), sep = "")
rogers_cohens <- paste("median: ", median(sum_stats$rogers_cohens), ", IQR: ", IQR(sum_stats$rogers_cohens),
", mean: ", signif(mean(sum_stats$rogers_cohens),3),
" ± ", signif(sd(sum_stats$rogers_cohens),3), sep = "")
results <- c(het_sig, het_phi, geno_sig, geno_cramersV, ks_sig, w1d, ld_ks_sig, ld_w1d, gc_sig, gc_cohens,
rogers_sig, rogers_cohens)
sum_results[sum_results$rec_param == i, c("het_sig", "mean_sd_phi", "geno_sig", "mean_sd_cramersV",
"ks_sig", "mean_sd_w1d", "ld_ks_sig", "mean_sd_ld_w1d",
"gc_sig", "mean_sd_gc", "rogers_sig", "rogers_cohens")] <- results
}
#vary over all recombination parameters
rec_param <- c("normal_rec", "high_rec", "zero_rec", "mean_rec")
#read genmap to constrain markers/calc ld decay etc.
genmap <- read.csv("../data/sim_data/B73_genmap.csv")
#read populations
populations <- read.csv("../data/sim_data/populations.csv")
#LD decay
#keep Locus/Marker, Position and LG/Chromosome
ld_map <- genmap[,c("Marker", "Map.cM.", "Chromosome")]
colnames(ld_map) <- c("Locus","Position","LG")
#vary over all recombination parameters
rec_param <- c("normal_rec", "high_rec", "zero_rec", "mean_rec")
library(sommer)
library(stats)
library(transport)
library(effectsize)
library(adegenet)
source("stat_functions.R")
#read in sum stats to compare rec scenarios
#recomb stats from genotype simulation
recomb_stats <- read.csv("../stats/summary_stats/recomb_stats.csv")
sum_results <- data.frame("rec_param" = c("normal_rec", "high_rec", "zero_rec", "mean_rec"),
"het_sig" = NA, "mean_sd_phi" = NA, "geno_sig" = NA, "mean_sd_cramersV" = NA,
"ks_sig" = NA, "mean_sd_w1d" = NA, "ld_ks_sig" = NA, "mean_sd_ld_w1d" = NA,
"gc_sig" = NA, "mean_sd_gc" = NA, "rogers_sig" = NA, "rogers_cohens" = NA)
for(i in rec_param){
sum_stats <- read.csv(paste("../stats/summary_stats/sum_stats_",i,".csv", sep = ""))
het_sig <- paste(table(sum_stats$het_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$het_p)), sep = "")
het_phi <- paste("median: ", median(sum_stats$het_phi), ", IQR: ", IQR(sum_stats$het_phi),
", mean: ", signif(mean(sum_stats$het_phi),3),
" ± ", signif(sd(sum_stats$het_phi),3), sep = "")
geno_sig <- paste(table(sum_stats$geno_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$geno_p)), sep = "")
geno_cramersV <- paste("median: ", median(sum_stats$geno_cramersV), ", IQR: ", IQR(sum_stats$geno_cramersV),
", mean: ", signif(mean(sum_stats$geno_cramersV),3),
" ± ", signif(sd(sum_stats$geno_cramersV),3), sep = "")
ks_sig <- paste(table(sum_stats$ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ks_p)), sep = "")
w1d <- paste("median: ", median(sum_stats$w1d), ", IQR: ", IQR(sum_stats$w1d),
", mean: ", signif(mean(sum_stats$w1d),3),
" ± ", signif(sd(sum_stats$w1d),3), sep = "")
ld_ks_sig <- paste(table(sum_stats$ld_ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ld_ks_p)), sep = "")
ld_w1d <- paste("median: ", median(sum_stats$ld_w1d), ", IQR: ", IQR(sum_stats$ld_w1d),
", mean: ", signif(mean(sum_stats$ld_w1d),3),
" ± ", signif(sd(sum_stats$ld_w1d),3), sep = "")
gc_sig <- paste(table(sum_stats$gc_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$gc_p)), sep = "")
gc_cohens <- paste("median: ", median(sum_stats$gc_cohens), ", IQR: ", IQR(sum_stats$gc_cohens),
", mean: ", signif(mean(sum_stats$gc_cohens),3),
" ± ", signif(sd(sum_stats$gc_cohens),3), sep = "")
rogers_sig <- paste(table(sum_stats$rogers_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$rogers_p)), sep = "")
rogers_cohens <- paste("median: ", median(sum_stats$rogers_cohens), ", IQR: ", IQR(sum_stats$rogers_cohens),
", mean: ", signif(mean(sum_stats$rogers_cohens),3),
" ± ", signif(sd(sum_stats$rogers_cohens),3), sep = "")
results <- c(het_sig, het_phi, geno_sig, geno_cramersV, ks_sig, w1d, ld_ks_sig, ld_w1d, gc_sig, gc_cohens,
rogers_sig, rogers_cohens)
sum_results[sum_results$rec_param == i, c("het_sig", "mean_sd_phi", "geno_sig", "mean_sd_cramersV",
"ks_sig", "mean_sd_w1d", "ld_ks_sig", "mean_sd_ld_w1d",
"gc_sig", "mean_sd_gc", "rogers_sig", "rogers_cohens")] <- results
}
View(sum_results)
#read in sum stats to compare rec scenarios
#recomb stats from genotype simulation
recomb_stats <- read.csv("../stats/summary_stats/recomb_stats.csv")
sum_results <- data.frame("rec_param" = c("normal_rec", "high_rec", "zero_rec", "mean_rec"),
"recomb_mean" = NA, "recomb_num" = NA, "het_sig" = NA, "mean_sd_phi" = NA,
"geno_sig" = NA, "mean_sd_cramersV" = NA, "ks_sig" = NA, "mean_sd_w1d" = NA,
"ld_ks_sig" = NA, "mean_sd_ld_w1d" = NA, "gc_sig" = NA, "mean_sd_gc" = NA,
"rogers_sig" = NA, "rogers_cohens" = NA)
for(i in rec_param){
sum_stats <- read.csv(paste("../stats/summary_stats/sum_stats_",i,".csv", sep = ""))
het_sig <- paste(table(sum_stats$het_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$het_p)), sep = "")
het_phi <- paste("median: ", median(sum_stats$het_phi), ", IQR: ", IQR(sum_stats$het_phi),
", mean: ", signif(mean(sum_stats$het_phi),3),
" ± ", signif(sd(sum_stats$het_phi),3), sep = "")
geno_sig <- paste(table(sum_stats$geno_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$geno_p)), sep = "")
geno_cramersV <- paste("median: ", median(sum_stats$geno_cramersV), ", IQR: ", IQR(sum_stats$geno_cramersV),
", mean: ", signif(mean(sum_stats$geno_cramersV),3),
" ± ", signif(sd(sum_stats$geno_cramersV),3), sep = "")
ks_sig <- paste(table(sum_stats$ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ks_p)), sep = "")
w1d <- paste("median: ", median(sum_stats$w1d), ", IQR: ", IQR(sum_stats$w1d),
", mean: ", signif(mean(sum_stats$w1d),3),
" ± ", signif(sd(sum_stats$w1d),3), sep = "")
ld_ks_sig <- paste(table(sum_stats$ld_ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ld_ks_p)), sep = "")
ld_w1d <- paste("median: ", median(sum_stats$ld_w1d), ", IQR: ", IQR(sum_stats$ld_w1d),
", mean: ", signif(mean(sum_stats$ld_w1d),3),
" ± ", signif(sd(sum_stats$ld_w1d),3), sep = "")
gc_sig <- paste(table(sum_stats$gc_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$gc_p)), sep = "")
gc_cohens <- paste("median: ", median(sum_stats$gc_cohens), ", IQR: ", IQR(sum_stats$gc_cohens),
", mean: ", signif(mean(sum_stats$gc_cohens),3),
" ± ", signif(sd(sum_stats$gc_cohens),3), sep = "")
rogers_sig <- paste(table(sum_stats$rogers_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$rogers_p)), sep = "")
rogers_cohens <- paste("median: ", median(sum_stats$rogers_cohens), ", IQR: ", IQR(sum_stats$rogers_cohens),
", mean: ", signif(mean(sum_stats$rogers_cohens),3),
" ± ", signif(sd(sum_stats$rogers_cohens),3), sep = "")
results <- c(het_sig, het_phi, geno_sig, geno_cramersV, ks_sig, w1d, ld_ks_sig, ld_w1d, gc_sig, gc_cohens,
rogers_sig, rogers_cohens)
sum_results[sum_results$rec_param == i, c("het_sig", "mean_sd_phi", "geno_sig", "mean_sd_cramersV",
"ks_sig", "mean_sd_w1d", "ld_ks_sig", "mean_sd_ld_w1d",
"gc_sig", "mean_sd_gc", "rogers_sig", "rogers_cohens")] <- results
}
View(sum_results)
apply(recomb_stats[,2:9], 2, mean)
recomb_sumstats <- apply(recomb_stats[,2:9], 2, mean)
recomb_sumstats[0]
recomb_sumstats[1]
recomb_sumstats[2]
j <- 0
#read in sum stats to compare rec scenarios
#recomb stats from genotype simulation
recomb_stats <- read.csv("../stats/summary_stats/recomb_stats.csv")
recomb_sumstats <- apply(recomb_stats[,2:9], 2, mean)
sum_results <- data.frame("rec_param" = c("normal_rec", "high_rec", "zero_rec", "mean_rec"),
"recomb_mean" = NA, "recomb_num" = NA, "het_sig" = NA, "mean_sd_phi" = NA,
"geno_sig" = NA, "mean_sd_cramersV" = NA, "ks_sig" = NA, "mean_sd_w1d" = NA,
"ld_ks_sig" = NA, "mean_sd_ld_w1d" = NA, "gc_sig" = NA, "mean_sd_gc" = NA,
"rogers_sig" = NA, "rogers_cohens" = NA)
j <- 0
for(i in rec_param){
sum_stats <- read.csv(paste("../stats/summary_stats/sum_stats_",i,".csv", sep = ""))
het_sig <- paste(table(sum_stats$het_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$het_p)), sep = "")
het_phi <- paste("median: ", median(sum_stats$het_phi), ", IQR: ", IQR(sum_stats$het_phi),
", mean: ", signif(mean(sum_stats$het_phi),3),
" ± ", signif(sd(sum_stats$het_phi),3), sep = "")
geno_sig <- paste(table(sum_stats$geno_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$geno_p)), sep = "")
geno_cramersV <- paste("median: ", median(sum_stats$geno_cramersV), ", IQR: ", IQR(sum_stats$geno_cramersV),
", mean: ", signif(mean(sum_stats$geno_cramersV),3),
" ± ", signif(sd(sum_stats$geno_cramersV),3), sep = "")
ks_sig <- paste(table(sum_stats$ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ks_p)), sep = "")
w1d <- paste("median: ", median(sum_stats$w1d), ", IQR: ", IQR(sum_stats$w1d),
", mean: ", signif(mean(sum_stats$w1d),3),
" ± ", signif(sd(sum_stats$w1d),3), sep = "")
ld_ks_sig <- paste(table(sum_stats$ld_ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ld_ks_p)), sep = "")
ld_w1d <- paste("median: ", median(sum_stats$ld_w1d), ", IQR: ", IQR(sum_stats$ld_w1d),
", mean: ", signif(mean(sum_stats$ld_w1d),3),
" ± ", signif(sd(sum_stats$ld_w1d),3), sep = "")
gc_sig <- paste(table(sum_stats$gc_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$gc_p)), sep = "")
gc_cohens <- paste("median: ", median(sum_stats$gc_cohens), ", IQR: ", IQR(sum_stats$gc_cohens),
", mean: ", signif(mean(sum_stats$gc_cohens),3),
" ± ", signif(sd(sum_stats$gc_cohens),3), sep = "")
rogers_sig <- paste(table(sum_stats$rogers_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$rogers_p)), sep = "")
rogers_cohens <- paste("median: ", median(sum_stats$rogers_cohens), ", IQR: ", IQR(sum_stats$rogers_cohens),
", mean: ", signif(mean(sum_stats$rogers_cohens),3),
" ± ", signif(sd(sum_stats$rogers_cohens),3), sep = "")
results <- c(recomb_sumstats[1+j], recomb_sumstats[2+j], het_sig, het_phi, geno_sig, geno_cramersV, ks_sig,
w1d, ld_ks_sig, ld_w1d, gc_sig, gc_cohens, rogers_sig, rogers_cohens)
sum_results[sum_results$rec_param == i, c("recomb_mean", "recomb_num", "het_sig", "mean_sd_phi", "geno_sig",
"mean_sd_cramersV",
"ks_sig", "mean_sd_w1d", "ld_ks_sig", "mean_sd_ld_w1d",
"gc_sig", "mean_sd_gc", "rogers_sig", "rogers_cohens")] <- results
j <- j + 2
}
recomb_sumstats
View(ld_map)
View(genmap)
297570924/1000000
library(openxlsx)
library(data.table)
#calculate recombination rates (cM/Mb) for Maize NAM population (B73)
#read in cM and chr SNP data
NAM_map <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_map_20080419_xlsx.xlsx")
SNP_pos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_1144SNPs_AGPv1_positions.xlsx")
SNP_pos <- SNP_pos[!((SNP_pos$Position == "NULL") | (SNP_pos$Position == "multiple")),]
#save SNP positions
SNP_pos <- SNP_pos[,c("Marker", "Chr", "Position")]
colnames(SNP_pos) <- c("Marker", "Chromosome", "Position(bp)")
write.csv(SNP_pos, "../data/test_data/NAM_SNP_positions.csv", row.names = FALSE)
#merge on SNP id
gen_map <- merge(NAM_map[,c("marker", "ch", "cumulative")],
SNP_pos[,c("Marker", "Position(bp)")], by.x = "marker", by.y = "Marker")
gen_map$Position <- as.numeric(gen_map$Position)
#sort by chr then position
gen_map <- gen_map[order(gen_map$ch, gen_map$Position),]
gen_map <- data.table(gen_map)
gen_map[, order := ((shift(cumulative, n = -1) - cumulative) >= 0), by = ch]
#manually remove non-monotonic SNPs (which are ordered the other way round than above order variable)
gen_map <- gen_map[!(marker %in% c("PZA01072.1", "PZA00545.26", "PZA00963.3", "PZA01960.1",
"zb7.2", "PHM1184.26", "PHM2438.28", "PZA03227.1"))]
#remove SNPs where cumulative cM order != SNP position order (non-monotonic SNPs)
gen_map <- gen_map[order == TRUE]
#calc cM/Mb: (i+1-i)/(j+1-j) where i is cM and j is bp, transform to Mb, group by chr
gen_map[, pos_diff := (shift(Position, n = -1) - Position), by = ch]
gen_map[, cM_diff := (shift(cumulative, n = -1) - cumulative), by = ch]
gen_map[, rate := cM_diff/(pos_diff/1000000)]
View(gen_map)
table(is.na(gen_map$rate))
#impute rates for last SNPs per chr
gen_map[,rate := replace(rate, is.na(rate), 0), by = ch]
table(is.na(gen_map$rate))
View(gen_map)
#save pos diff for CNN training
genmap_posdiff <- gen_map[,c("marker", "pos_diff")]
genmap_posdiff[is.na(genmap_posdiff)] <- 0
write.csv(genmap_posdiff, "../data/sim_data/genmap_posdiff.csv", row.names = FALSE)
gen_map <- gen_map[,c("marker","ch", "Position", "rate", "cumulative")]
colnames(gen_map) <- c("Marker", "Chromosome", "Position(bp)", "Rate(cM/Mb)", "Map(cM)")
View(gen_map)
write.csv(gen_map, "../data/sim_data/B73_genmap.csv", row.names = FALSE)
View(sum_results)
