#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
stats <- c(het_p, geno_p, ks_p, w1d)
stats <- ifelse(stats < 0.001, "<0.001", round(stats,3))
sum_stats[sum_stats$population == j, c("het_p", "geno_p", "ks_p", "w1d")] <- stats
}
print("finished")
write.csv(sum_stats, paste("../stats/sum_stats_",i,".csv", sep = ""), row.names = FALSE)
}
res_rec
test <- res_rec$all.LG
plot(test$r2, test$d)
plot(test$r2, test$d,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,ylab=expression(r^2),
xlab="Distance in cM")
plot(test$r2, test$d)
plot(test$d, test$r2)
plot(test$d, test$r2,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,ylab=expression(r^2),
xlab="Distance in cM")
lines(test$d+1, test$r2)
plot(test$d, test$r2,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,ylab=expression(r^2),
xlab="Distance in cM")
points(test$d+1, test$r2)
?transp
points(test$d+1, test$r2,col = transp("red", alpha = 0.5), pch = 20, cex = 0.5)
plot(test$d, test$r2,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,ylab=expression(r^2),
xlab="Distance in cM")
points(test$d+1, test$r2,col = transp("red", alpha = 0.5), pch = 20, cex = 0.5)
?abline
# Sample data
set.seed(42)
data <- data.frame(x = rnorm(100), y = rnorm(100))
# Scatterplot
plot(data$x, data$y, main = "Scatterplot with Spline", xlab = "X-axis", ylab = "Y-axis")
# Fit a spline
spline_fit <- smooth.spline(data$x, data$y)
# Generate points to plot the spline
spline_points <- data.frame(x = seq(min(data$x), max(data$x), length.out = 100))
spline_points$y <- predict(spline_fit, newdata = spline_points$x)$y
# Add spline to the plot
lines(spline_points$x, spline_points$y, col = "red", lwd = 2)
# Sample data
set.seed(42)
data <- data.frame(x = rnorm(100), y = rnorm(100))
# Scatterplot
plot(data$x, data$y, main = "Scatterplot with Spline", xlab = "X-axis", ylab = "Y-axis")
# Fit a spline
spline_fit <- smooth.spline(data$x, data$y)
# Generate points to plot the spline
spline_points <- data.frame(x = seq(min(data$x), max(data$x), length.out = 100))
spline_points$y <- predict(spline_fit, newdata = spline_points$x)$y
# Add spline to the plot
lines(spline_points$x, spline_points$y, col = "red", lwd = 2)
# Sample data
set.seed(42)
data <- data.frame(x = rnorm(100), y = rnorm(100))
# Scatterplot
plot(data$x, data$y, main = "Scatterplot with Smooth Abline", xlab = "X-axis", ylab = "Y-axis")
# Fit a LOESS smoother
loess_fit <- loess(y ~ x, data = data)
# Generate points to plot the smoother
smooth_points <- data.frame(x = seq(min(data$x), max(data$x), length.out = 100))
smooth_points$y <- predict(loess_fit, newdata = smooth_points)
# Add smoothed line to the plot
lines(smooth_points$x, smooth_points$y, col = "blue", lwd = 2)
loess_fit <- loess(test$d, test$r2)
loess_fit <- loess(test$d~test$r2)
# Generate points to plot the smoother
smooth_points <- data.frame(x = seq(min(test$r2), max(test$r2), length.out = 100))
smooth_points$y <- predict(loess_fit, newdata = smooth_points)
# Generate points to plot the smoother
smooth_points <- data.frame(x = seq(min(test$r2), max(test$r2), length.out = length(test$r2)))
smooth_points$y <- predict(loess_fit, newdata = smooth_points)
test <- res_rec$all.LG
loess_fit <- loess(test$d~test$r2)
# Generate points to plot the smoother
smooth_points <- data.frame(x = seq(min(test$r2), max(test$r2), length.out = length(test$r2)))
smooth_points$y <- predict(loess_fit, newdata = smooth_points)
plot(test$d, test$r2,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,ylab=expression(r^2),
xlab="Distance in cM")
lines(smooth_points$x, smooth_points$y, col = "blue", lwd = 2)
test <- res_rec$all.LG
loess_fit <- loess(test$r2~test$d)
# Generate points to plot the smoother
smooth_points <- data.frame(x = seq(min(test$d), max(test$d), length.out = length(test$d)))
smooth_points$y <- predict(loess_fit, newdata = smooth_points)
plot(test$d, test$r2,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,ylab=expression(r^2),
xlab="Distance in cM")
lines(smooth_points$x, smooth_points$y, col = "blue", lwd = 2)
plot(test$d, test$r2,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,ylab=expression(r^2),
xlab="Distance in cM")
points(smooth_points$x, smooth_points$y, col = "blue", lwd = 2)
ggplot(test, aes(d, r2)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
ggplot(test, aes(d, r2)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
?geom_point
ggplot(test, aes(d, r2)) +
geom_point(size = 2, alpha = 0.5, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "blue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
?geom_smooth
ggplot(test, aes(d, r2)) +
geom_point(size = 2, alpha = 0.5, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-a
ggplot(test, aes(d, r2)) +
geom_point(size = 2, alpha = 0.5, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
ggplot(test, aes(d, r2)) +
geom_point(size = 2, alpha = 0.3, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
ggplot(test, aes(d, r2)) +
geom_point(size = 2, alpha = 0.01, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
ggplot(test, aes(d, r2)) +
geom_point(size = 2, alpha = 0.1, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
ggplot(test, aes(d, r2)) +
geom_point(size = 2, alpha = 0.05, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
ggplot(test, aes(d, r2)) +
geom_point(size = 1, alpha = 0.05, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
ggplot(test, aes(d, r2)) +
geom_point(size = 1, alpha = 0.1, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkblue") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Abline", x = "X-axis", y = "Y-axis")
test2 <- test
test2$d <- test2$d + 5
ggplot() +
geom_point(data = test, aes(d, r2), size = 2, alpha = 0.5, color = "green") +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "blue") +
geom_point(data = test2, aes(d, r2), size = 2, alpha = 0.5, color = "orange") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "red") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Lines", x = "X-axis", y = "Y-axis")
ggplot() +
geom_point(data = test, aes(d, r2), size = 1, alpha = 0.1, color = "blue") +
geom_point(data = test2, aes(d, r2), size = 1, alpha = 0.1, color = "orange") +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Lines", x = "X-axis", y = "Y-axis")
ggplot() +
geom_point(data = test, aes(d, r2), size = 1.5, alpha = 0.05, color = "blue") +
geom_point(data = test2, aes(d, r2), size = 1.5, alpha = 0.05, color = "orange") +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "Scatterplot with Smooth Lines", x = "X-axis", y = "Y-axis")
?labs
ggplot() +
geom_point(data = test, aes(d, r2), size = 1.5, alpha = 0.05, color = "blue") +
geom_point(data = test2, aes(d, r2), size = 1.5, alpha = 0.05, color = "orange") +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "test", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_point(data = test, aes(d, r2), size = 1.5, alpha = 0.05, color = "blue") +
geom_point(data = test2, aes(d, r2), size = 1.5, alpha = 0.05, color = "orange") +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "test", x = "Distance in cM", y = expression(r^2))
ggplot() +
geom_point(data = test, aes(d, r2), size = 1.5, alpha = 0.05, color = "blue") +
geom_point(data = test2, aes(d, r2), size = 1.5, alpha = 0.05, color = "orange") +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "test", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0))
ggplot() +
geom_point(data = test, aes(d, r2), size = 1.5, alpha = 0.05, color = "blue") +
geom_point(data = test2, aes(d, r2), size = 1.5, alpha = 0.05, color = "orange") +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "test", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.2))
ggplot() +
geom_point(data = test, aes(d, r2, color = "real"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2, color = "sim"), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5))+
scale_color_manual(name = "test", values = c("real" = "blue", "sim" = "orange"))
ggplot() +
geom_point(data = test, aes(d, r2, color = "real"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "sim"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name = "test", values = c("real" = "blue", "sim" = "orange"))
ggplot() +
geom_point(data = test, aes(d, r2, color = "real"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "sim"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name = "test", values = c("real" = "blue", "sim" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(name = "", values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.justification=c(1,0)) +
scale_color_manual(name = "", values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.justification=c(1,1),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = "", values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = "", values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = "", values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", alpha = 0.5 linewidth = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", alpha = 0.5 linewidth = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = test, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = test2, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = test, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = test2, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
?element_rect
#LD decay with recombination
whole_add <- read.csv("../sim_output/normal_rec/additive_encoding/add_1.csv")[-1]
res_rec <- LD.decay(whole_add, ld_map)
res_rec$all.LG <- res_rec$all.LG[(res_rec$all.LG$p < .001),]
#LD decay in real population
add_1 <- read.csv("../data/NAM_genotype_data/additive_encoding/pop_1_add.csv")[-1]
res_pop1 <- LD.decay(add_1, ld_map)
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$p < .001),]
real <- res_pop1$all.LG
sim <- res_rec$all.LG
ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue") +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange") +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
whole_add <- whole_add[,genmap$Marker]
add_1 <- add_1[,genmap$Marker]
res_pop1 <- LD.decay(add_1, ld_map)
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$p < .001),]
res_rec <- LD.decay(whole_add, ld_map)
res_rec$all.LG <- res_rec$all.LG[(res_rec$all.LG$p < .001),]
ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$d < 150),]
ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
#LD decay in real population
add_1 <- read.csv("../data/NAM_genotype_data/additive_encoding/pop_1_add.csv")[-1]
add_1 <- add_1[,genmap$Marker]
res_pop1 <- LD.decay(add_1, ld_map)
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$p < .001),]
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$d < 150),]
real <- res_pop1$all.LG
#LD decay with recombination
whole_add <- read.csv("../sim_output/normal_rec/additive_encoding/add_1.csv")[-1]
whole_add <- whole_add[,genmap$Marker]
res_rec <- LD.decay(whole_add, ld_map)
res_rec$all.LG <- res_rec$all.LG[(res_rec$all.LG$p < .001),]
sim <- res_rec$all.LG
ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$r2 < .99),]
real <- res_pop1$all.LG
ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", size = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7)))
#ks test on simulated and real pop
ks.test(res_rec[["all.LG"]][["r2"]], res_pop1[["all.LG"]][["r2"]])
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(sim[["all.LG"]][["r2"]], 1000), sample(real[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(sim[["r2"]], 1000), sample(real[["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(sim[["r2"]], 1000), sample(real[["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(sim[["r2"]], 500), sample(real[["r2"]]), 500)
#ks test on simulated and real pop
ks.test(sample(sim[["r2"]], 500), sample(real[["r2"]]), 500)
#ks test on simulated and real pop
ks.test(sample(sim[["r2"]], 500), sample(real[["r2"]]), 500)
#ks test on simulated and real pop
ks.test(sample(sim[["r2"]], 500), sample(real[["r2"]]), 500)
View(res_pop1)
add_1 <- read.csv("../data/NAM_genotype_data/additive_encoding/pop_1_add.csv")[-1]
add_1 <- add_1[,genmap$Marker]
res_pop1 <- LD.decay(add_1, ld_map)
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$p < .001),]
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$r2 < .99),]
real <- res_pop1$all.LG
View(res_pop1)
11558/974
