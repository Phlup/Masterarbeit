boxplot(dist(add_1, method = "manhattan"), main = "Euclidean distance of additive encoding real population")
#distance measure (e.g. euclidian distance/rogers distance)
par(mfrow=c(1,2))
boxplot(dist(whole_add, method = "manhattan"), main = "Euclidean distance of additive encoding simulated population", ylim=c(200,1200))
boxplot(dist(add_1, method = "manhattan"), main = "Euclidean distance of additive encoding real population", ylim=c(200,1200))
calculate_nucleotide_diversity(seq_freq, rec_pd, 194)
calculate_nucleotide_diversity(seq_freq, pop_1_pd, 194)
library(Matrix)
library(MASS)
library(crayon)
library(sommer)
#load data (pre-saved in the sommer package)
data(DT_wheat)
#prepare phenotypic data
colnames(DT_wheat) <- paste0("trait_",1:ncol(DT_wheat))
View(DT_wheat)
#load data (pre-saved in the sommer package)
data(DT_wheat)
View(GT_wheat)
#prepare phenotypic data
colnames(DT_wheat) <- paste0("trait_",1:ncol(DT_wheat))
DT_wheat <- as.data.frame(DT_wheat)
DT_wheat$sample_id <- as.factor(rownames(DT_wheat))
#add sample ids to genotypic data
rownames(GT_wheat) <- rownames(DT_wheat)
#generate additive relationship matrix (also called K.matrix)
K.matrix <- A.mat(GT_wheat)
View(K.matrix)
?A.mat
?mmer
library(Matrix)
library(MASS)
library(crayon)
library(sommer)
#load data (pre-saved in the sommer package)
data(DT_wheat)
#prepare phenotypic data
colnames(DT_wheat) <- paste0("trait_",1:ncol(DT_wheat))
DT_wheat <- as.data.frame(DT_wheat)
DT_wheat$sample_id <- as.factor(rownames(DT_wheat))
#add sample ids to genotypic data
rownames(GT_wheat) <- rownames(DT_wheat)
#Please, take a look into genotypic data, here a bi-allelic SNP call is equal to:
# -1 if homozygous for one allele (e.g. AA),  1 if homozygous for the other allele (e.g. TT), and  0 if heterozygous for one allele (e.g. AT).
#generate additive relationship matrix (also called K.matrix)
K.matrix <- A.mat(GT_wheat)
#Here, I separate a group of the genotypes to predict their phenotype
genotypes_to_predict<-sample(rownames(DT_wheat), 60, replace = FALSE)
validation_set<-DT_wheat[genotypes_to_predict,]
#take out such phenotypes from the training set
DT_wheat[genotypes_to_predict,1:4]<-NA
#run GBLUP
model <- mmer(trait_1 ~ 1, random = ~vsr(sample_id,Gu=K.matrix), rcov=~units, data = DT_wheat, verbose = FALSE)
#get overall mean
u <- model$Beta$Estimate
#get genotypic effects for each individual (breeding values)
geno_effects <- model$U$`u:sample_id`$trait_1
#get genotypic values (phenotypic estimated values)
estimated_phenotypes <- u + geno_effects
#check predictive accuracy
y <- estimated_phenotypes[genotypes_to_predict]
x <- validation_set[genotypes_to_predict,"trait_1"]
cor.test(y, x, method = "pearson")
plot(y ~ x, xlab="Observed values", ylab="Predicted values")
abline(lm(y ~ x), col = "blue")
model
View(model)
?hist
View(model)
model[["Beta"]][["Effect"]]
model[["Beta"]][["Trait"]]
map <- read.csv("../data/test_data/B73_genmap.csv")
map <- read.csv("../data/sim_data/B73_genmap.csv")
map <- read.csv("../data/sim_data/B73_genmap.csv")
#keep Locus/Marker, Position and LG/Chromosome
map <- map[,c("Marker", "Map.cM.", "Chromosome")]
colnames(map) <- c("Locus","Position","LG")
#data(DT_cpdata)
#CPgeno <- GT_cpdata
#CPgeno[1:5,1:5]
#
#mapCP <- MP_cpdata; head(mapCP)
#names(mapCP) <- c("Locus","Position","LG")
#
#mapCP <- mapCP[which(mapCP$LG <= 3),]
#
#res <- LD.decay(CPgeno, mapCP)
#names(res)
#
##constrain to significant LG with p < 0.001
#res$all.LG <- res$all.LG[which(res$all.LG$p < .001),]
plot_LD_decay <- function(est, title){
with(est$all.LG, plot(r2~d,col=transp("cadetblue"),
xlim=c(0,55), ylim=c(0,1),
pch=20,cex=0.5,ylab=expression(r^2),
xlab="Distance in cM",main=title)
)
}
#LD decay with recombination
whole_add <- read.csv("../sim_output/whole_add.csv")
whole_add <- whole_add[-1]
res_rec <- LD.decay(whole_add, map)
res_rec$all.LG <- res_rec$all.LG[(res_rec$all.LG$p < .001),]
plot_LD_decay(res_rec, "R2~D in recombination simulation")
#LD decay without recombination
#LD decay with recombination
whole_add <- read.csv("../sim_output/additive_encoding/geno_B73_B97.csv")
whole_add <- whole_add[-1]
res_rec <- LD.decay(whole_add, map)
res_rec$all.LG <- res_rec$all.LG[(res_rec$all.LG$p < .001),]
plot_LD_decay(res_rec, "R2~D in recombination simulation")
#LD decay in real population
add_1 <- read.csv("../data/NAM_genotype_data/pop_01_genos.csv")
add_1 <- add_1[-1]
res_pop1 <- LD.decay(add_1, map)
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$p < .001),]
plot_LD_decay(res_pop1, "R2~D in real population")
res_pop1 <- LD.decay(add_1, map)
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$p < .001),]
plot_LD_decay(res_pop1, "R2~D in real population")
warnings()
#LD decay in real population
add_1 <- read.csv("../data/NAM_genotype_data/pop_01_genos.csv")
View(add_1)
add_1 <- add_1[-1]
#LD decay in real population
add_1 <- read.csv("../data/test_data/pop_01_genos.csv")
add_1 <- add_1[-1]
#LD decay in real population
add_1 <- read.csv("../data/test_data/additive_1.csv")
add_1 <- add_1[-1]
res_pop1 <- LD.decay(add_1, map)
res_pop1$all.LG <- res_pop1$all.LG[(res_pop1$all.LG$p < .001),]
plot_LD_decay(res_pop1, "R2~D in real population")
par(mfrow=c(1,2))
plot_LD_decay(res_rec, "R2~D in recombination simulation")
plot_LD_decay(res_pop1, "R2~D in real population")
#ks test on simulated and real pop
ks.test(res_rec[["all.LG"]][["r2"]], res_pop1[["all.LG"]][["r2"]])
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#ks test on simulated and real pop
ks.test(sample(res_rec[["all.LG"]][["r2"]], 1000), sample(res_pop1[["all.LG"]][["r2"]]), 1000)
#smaller sample non-significant for alpha = 0.05
plot(density(sample(res_rec[["all.LG"]][["r2"]], 1000)))
plot(density(sample(res_pop1[["all.LG"]][["r2"]], 1000)))
#get population genotypes
populations <- read.table("../data/NAM_map_and_genos-121025/NAM_populations.xls")
library(openxlsx)
library(data.table)
#get population genotypes
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xls")
#get population genotypes
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
View(populations)
#read NAM genos extract parents and b73 allele
NAM_genos <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
#only parent genos
NAM_parent_genos <- t(NAM_genos[,c(1:27)])
colnames(NAM_parent_genos)[1] <- "RIL"
#read NAM genos extract parents and b73 allele
NAM_genos <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
#only parent genos
NAM_parent_genos <- t(NAM_genos[,c(1:27)])
colnames(NAM_parent_genos)[1] <- "RIL"
View(NAM_genos)
View(NAM_parent_genos)
#B73 allele
B73_allele <- data.table("SNP" = row.names(NAM_genos), "B73" = paste(substring(NAM_genos[,1], 1, 1), substring(NAM_genos[,1], 3, 3),
sep = ""))
asisb73 <- read.csv("../data/sim_data/B73_alleles.csv")
View(asisb73)
View(B73_allele)
asisb73 <- read.csv("../data/sim_data/B73_alleles.csv", row.names = FALSE)
asis_parent <- read.csv("../data/sim_data/NAM_parent_genos.csv")
View(asis_parent)
View(NAM_parent_genos)
#only parent genos
NAM_parent_genos <- as.data.frame(t(NAM_genos[,c(1:27)]))
View(NAM_parent_genos)
NAM_parent_genos$SNP_NAME
#get population genotypes
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$parent[!(NAM_parent_genos$SNP_NAME %in% populations$parent)]
populations$parent
intersect(populations$parent, NAM_parent_genos$SNP_NAME)
length(intersect(populations$parent, NAM_parent_genos$SNP_NAME))
NAM_parent_genos$SNP_NAME[!(NAM_parent_genos$SNP_NAME %in% intersect(populations$parent, NAM_parent_genos$SNP_NAME))]
#get population genotypes
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
NAM_parent_genos$SNP_NAME[!(NAM_parent_genos$SNP_NAME %in% intersect(populations$parent, NAM_parent_genos$SNP_NAME))]
View(populations)
populations$name <- paste("B73_", populations$parent, sep = "")
write.csv(populations, "../data/sim_data/populations.csv")
write.csv(populations, "../data/sim_data/populations.csv", row.names = FALSE)
populations[name, pop = 1]
populations[name, pop == 1]
populations[populations$name, populations$pop == 1]
populations[name, populations$pop == 1]
populations[populations$pop == 1,]
populations[populations$pop == 1, name]
populations[populations$pop == 1, "name"]
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = substring(genos_raw[i,1],3,4)
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
start = i+1
size <- c(size, (start-end))
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
populations$size <- size
#get population genotypes
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = substring(genos_raw[i,1],3,4)
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, (end-start))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, (length(genos_raw[,1])-start))
populations$size <- size
size
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = substring(genos_raw[i,1],3,4)
print(populations[populations$pop == pop, "name"])
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, (end-start))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, (i+1-start))
populations$size <- size
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = sub("^0+", "", substring(genos_raw[i,1],3,4))
print(populations[populations$pop == pop, "name"])
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, (end-start))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, (i+1-start))
populations$size <- size
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = sub("^0+", "", substring(genos_raw[i,1],3,4))
print(populations[populations$pop == pop, "name"])
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, length(start:end))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, (i+1-start))
populations$size <- size
size
1:5
length(1:5)
length(5:1)
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = sub("^0+", "", substring(genos_raw[i,1],3,4))
print(populations[populations$pop == pop, "name"])
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
print(start)
print(end)
size <- c(size, length(start:end))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, (i+1-start))
populations$size <- size
size
View(genos_raw)
sum(size[-1])
c(1,2,3)[-1]
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = sub("^0+", "", substring(genos_raw[i,1],3,4))
print(populations[populations$pop == pop, "name"])
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
print(start)
print(end)
size <- c(size, length(start:end))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, length(start:i+1))
populations$size <- size[-1]
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = sub("^0+", "", substring(genos_raw[i,1],3,4))
print(populations[populations$pop == pop, "name"])
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
print(start)
print(end)
size <- c(size, length(start:end))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_",
populations[populations$pop == pop, "name"],
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, length(start:i+1))
populations$size <- size[-1]
sum(populations$size)
View(genos_raw)
length(genos_raw[,1])
genos_raw[,1] -> test
test
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = sub("^0+", "", substring(genos_raw[i,1],3,4))
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_", pop,
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, length(start:end))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_", pop,
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, length(start:i+1))
populations$size <- size[-1]
write.csv(populations, "../data/sim_data/populations.csv", row.names = FALSE)
populations <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_populations.xlsx")
populations$name <- paste("B73_", populations$parent, sep = "")
genos_raw <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
genos_raw <- t(genos_raw)
genos_raw <- genos_raw[-c(1:27),]
start = 1
size = NA
for (i in 1:(length(genos_raw[,1])-1)){
if(substring(genos_raw[i,1],0,4) != substring(genos_raw[i+1,1],0,4)){
end = i
pop = sub("^0+", "", substring(genos_raw[i,1],3,4))
write.csv(genos_raw[c(start:end),], paste("../data/NAM_genotype_data/pop_", pop,
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, length(start:end))
start = i+1
}
}
pop = substring(genos_raw[start,1],3,4)
write.csv(genos_raw[c(start:i+1),], paste("../data/NAM_genotype_data/pop_", pop,
"_genos.csv", sep = ""), row.names = FALSE)
size <- c(size, length(start:i+1))
populations$size <- size[-1]
write.csv(populations, "../data/sim_data/populations.csv", row.names = FALSE)
for(i in 1:25){
pop <- read.csv(paste("../data/NAM_genotype_data/pop_", i, sep = ""))
print(length(pop[,1]))
}
for(i in 1:25){
pop <- read.csv(paste("../data/NAM_genotype_data/pop_", i,"_genos.csv", sep = ""))
print(length(pop[,1]))
}
for(i in c(1:16, 18:25)){
pop <- read.csv(paste("../data/NAM_genotype_data/pop_", i,"_genos.csv", sep = ""))
print(length(pop[,1]))
}
for(i in c(1:16, 18:26)){
pop <- read.csv(paste("../data/NAM_genotype_data/pop_", i,"_genos.csv", sep = ""))
print(length(pop[,1]))
}
