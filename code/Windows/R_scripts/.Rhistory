library(openxlsx)
#lod NAM genos imputed
NAM_genos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_genos_imputed_20090807.xlsx")
View(NAM_genos)
?rep
rep(1,2,3,4,5, each = 5)
rep(c(1,2,3,4,5)) each = 5)
rep(c(1,2,3,4,5)), each = 5)
rep(c(1,2,3,4,5), each = 5)
rep(c(1,2,3,4,5), each = 5) + rep(c(100,200,300,400,500), each = 5)
rep(c(1,2,3,4,5), each = 5) + rep(c0,100,200,300,400), each = 5)
rep(c(1,2,3,4,5), each = 5) + rep(c(0,100,200,300,400), each = 5)
rep(c(1,2,3,4,5), each = 5) + rep(c(0,100,200,300,400), each = 5) + 2
rep(c(1,2,3,4,5), each = 5) + rep(c(0,100,200,300,400), each = 5) + 2 -> index
NAM_genos[,index]
NAM_genos[index,]
NAM_genos[index,] -> test
View(test)
rep(c(1,2,3,4,5)) + rep(c(0,100,200,300,400), each = 5) + 2 -> index
index
NAM_genos[index,] -> test
?read.xlsx
colnames(NAM_genos) <- NAM_genos[3,]
colnames(NAM_genos) <- NAM_genos[2,]
colnames(test) <- NAM_genos[2,]
#lod NAM genos imputed
NAM_genos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_genos_imputed_20090807.xlsx")
#generate indices for 10 each of first 5 RILs
index <- rep(1:10) + rep(c(0,100,200,300,400), each = 5) + 2
#generate indices for 10 each of first 5 RILs
index <- rep(1:10) + rep(c(0,100,200,300,400), each = 10) + 2
#reduce NAM_genos
genos_reduce <- NAM_genos[index,]
colnames(genos_reduce) <- NAM_genos[2,]
View(genos_reduce)
#reduce NAM_genos
genos_reduce <- NAM_genos[index,c(1:50)]
colnames(genos_reduce) <- NAM_genos[2,]
colnames(genos_reduce) <- NAM_genos[2,c(1:50)]
write.csv(genos_reduce, "../data/test_data/genos_reduce.csv")
write.csv(genos_reduce, "../data/test_data/genos_reduce.csv")
genos_reuce <- sapply(genos_reduce, as.numeric)
View(genos_reuce)
genos_reduce[.c(2:50)] <- sapply(genos_reduce[,c(2:50)], as.numeric)
genos_reduce[,c(2:50)] <- sapply(genos_reduce[,c(2:50)], as.numeric)
View(genos_reduce)
write.csv(genos_reduce, "../data/test_data/genos_reduce.csv")
write.csv(genos_reduce, "../data/test_data/genos_reduce.csv", index = FALSE)
?write.csv
write.csv(genos_reduce, "../data/test_data/genos_reduce.csv", row.names = FALSE)
table(genos_reduce)
genos_reduce[genos_reduce == 1.5] <- 1.0
genos_reduce[genos_reduce == 0.5] <- 1.0
write.csv(genos_reduce, "../data/test_data/genos_reduce.csv", row.names = FALSE)
install.packages("adegenet")
library(adegent)
library(adegenet)
data("microsatt")
View(microsatt)
microsatt[["loci.eff"]]
microsatt[["alleles.names"]]
microsatt[["tab"]]
microsatt[["tab"]] -> sat
View(sat)
obj <- as.genpop(microsatt$tab)
View(obj)
data(microsatt)
obj <- as.genpop(microsatt$tab)
listDist <- lapply(1:5, function(i) cailliez(dist.genpop(obj,met=i)))
for(i in 1:5) {attr(listDist[[i]],"Labels") <- popNames(obj)}
View(listDist)
listDist[[1]]
dudi.pco
?dudi.pco
listPco <- lapply(listDist, dudi.pco,scannf=FALSE)
View(listPco)
for(i in 1:5) {scatter(listPco[[i]],sub=paste("Dist:", i))}
install.packages("gstudio")
48486-48232
254/0.002664
0.002664/254
0.002705/254
2705-2664
41/254
data(capitales)
data(capitales)
View(capitales)
capitales[["dist"]]
d0 <- capitales$dist
is.euclid(d0)
cailliez(d0, TRUE)
data(capitales)
d0 <- capitales$dist
is.euclid(d0) # FALSE
d1 <- cailliez(d0, TRUE)
# Cailliez constant = 2429.87867
is.euclid(d1) # TRUE
plot(d0, d1)
abline(lm(unclass(d1)~unclass(d0)))
print(coefficients(lm(unclass(d1)~unclass(d0))), dig = 8) # d1 = d + Cte
is.euclid(d0 + 2428) # FALSE
is.euclid(d0 + 2430) # TRUE the smallest constant
d1
dist.genpop
makefreq
showMethods(makefreq)
makefreq(x)
obj
data(microsatt)
obj <- as.genpop(microsatt$tab)
obj
dist.genpop
View(obj)
x <- as.genpop(microsatt$tab)
View(microsatt)
View(x)
x
x
dist.genpop
x@ploidy == as.integer(1)
levels(x@loc.fac)
length(levels(x@loc.fac))
x@loc.fac
View(microsatt)
microsatt[["tab"]]
microsatt[["alleles.names"]]
microsatt[["loci.eff"]]
sum(microsatt[["loci.eff"]])
length(x@loc.fac)
makefreq(x, missing = "mean", quiet = TRUE)
rowSums(makefreq(x, missing = "mean", quiet = TRUE))
rowSums(microsatt[["tab"]])
17/858
17/858*9
?makefreq
data(microbov)
obj1 <- microbov
obj2 <- genind2genpop(obj1)
makefreq(obj2, missing="mean")
View(obj2)
View(obj2)
makefreq(x, missing = "mean")
tab()
tab
length(levels(x@loc.fac))
dist.genpop
x
nloc <- length(levels(x@loc.fac))
x@tab
#
loc.fac <- x@loc.fac
loc.fac
?split
%*%
?%*%
?t
?row
#calculate allele frequencies
X <- makefreq(x, missing = "mean", quiet = TRUE)
nrow(X)
X
View(X)
?diag
diag(x=1)
diag(X)
dist.genpop(x, method = 1)
X %*% t(X)
X
matrix(data = c(1,2,3,4,5,6))
matrix(data = c(1,2,3,4,5,6), nrow = 2)
matrix(data = c(1,2,3,4,5,6), nrow = 2) -> Y
d <- Y %*% t(Y)
vec <- sqrt(diag(d))
d <- d/vec[col(d)]
d <- d/vec[row(d)]
d <- -log(d)
d <- as.dist(d)
d
matrix(data = c(1,2,3,4,5,6), ncol = 2) -> Y
Y
d <- Y %*% t(Y)
vec <- sqrt(diag(d))
d <- d/vec[col(d)]
d <- d/vec[row(d)]
d <- -log(d)
d <- as.dist(d)
d
d <- Y %*% t(Y)
vec <- sqrt(diag(d))
d <- d/vec[col(d)]
d <- d/vec[row(d)]
d <- -log(d)
d
matrix(data = c(1,2,3,4,5,6), nrow = 2) -> Y
d <- Y %*% t(Y)
vec <- sqrt(diag(d))
d <- d/vec[col(d)]
d <- d/vec[row(d)]
d <- -log(d)
d
?log
library(openxlsx)
library(data.table)
#calculate recombination rates (cM/Mb) for Maize NAM population (B73)
#read in cM and chr SNP data
NAM_map <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_map_20080419_xlsx.xlsx")
#SNP_pos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_1144SNPs_AGPv2_positions.xlsx")
SNP_pos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_1144SNPs_AGPv1_positions.xlsx")
SNP_pos <- SNP_pos[!((SNP_pos$Position == "NULL") | (SNP_pos$Position == "multiple")),]
#SNP_pos <- SNP_pos[SNP_pos$AGPv2_pos != "unknown",]
#merge on SNP id
gen_map <- merge(NAM_map[,c("marker", "ch", "cumulative")],
SNP_pos[,c("Marker", "Position")], by.x = "marker", by.y = "Marker")
gen_map$Position <- as.numeric(gen_map$Position)
#sort by chr then position
gen_map <- gen_map[order(gen_map$ch, gen_map$Position),]
gen_map <- data.table(gen_map)
gen_map[, order := ((shift(cumulative, n = -1) - cumulative) >= 0), by = ch]
#manually remove "misplaced SNPs"
gen_map <- gen_map[!(marker %in% c("PZA01072.1", "PZA00545.26", "PZA00963.3", "PZA01960.1",
"zb7.2", "PHM1184.26", "PHM2438.28", "PZA03227.1"))]
#remove SNPs where cumulative cM order != SNP position order
gen_map <- gen_map[order == TRUE]
#(i+1-i)/(j+1-j) where i is cM and j is bP, transform to Mb, group by chr
gen_map[, pos_diff := (shift(Position, n = -1) - Position), by = ch]
gen_map[, cM_diff := (shift(cumulative, n = -1) - cumulative), by = ch]
gen_map[, rate := cM_diff/(pos_diff/1000000)]
#impute rates for last SNPs per chr
gen_map[,rate := replace(rate, is.na(rate), median(rate, na.rm = TRUE)), by = ch]
gen_map <- gen_map[,c("ch", "Position", "rate", "cumulative")]
colnames(gen_map) <- c("Chromosome", "Position(bp)", "Rate(cM/Mb)", "Map(cM)")
gen_map$Chromosome <- as.character(gen_map$Chromosome)
View(gen_map)
gen_map$Chromosome <- paste("chr", gen_map$Chromosome, collapse = "")
#calculate recombination rates (cM/Mb) for Maize NAM population (B73)
#read in cM and chr SNP data
NAM_map <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_map_20080419_xlsx.xlsx")
#SNP_pos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_1144SNPs_AGPv2_positions.xlsx")
SNP_pos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_1144SNPs_AGPv1_positions.xlsx")
SNP_pos <- SNP_pos[!((SNP_pos$Position == "NULL") | (SNP_pos$Position == "multiple")),]
#SNP_pos <- SNP_pos[SNP_pos$AGPv2_pos != "unknown",]
#merge on SNP id
gen_map <- merge(NAM_map[,c("marker", "ch", "cumulative")],
SNP_pos[,c("Marker", "Position")], by.x = "marker", by.y = "Marker")
gen_map$Position <- as.numeric(gen_map$Position)
#sort by chr then position
gen_map <- gen_map[order(gen_map$ch, gen_map$Position),]
gen_map <- data.table(gen_map)
gen_map[, order := ((shift(cumulative, n = -1) - cumulative) >= 0), by = ch]
#manually remove "misplaced SNPs"
gen_map <- gen_map[!(marker %in% c("PZA01072.1", "PZA00545.26", "PZA00963.3", "PZA01960.1",
"zb7.2", "PHM1184.26", "PHM2438.28", "PZA03227.1"))]
#remove SNPs where cumulative cM order != SNP position order
gen_map <- gen_map[order == TRUE]
#(i+1-i)/(j+1-j) where i is cM and j is bP, transform to Mb, group by chr
gen_map[, pos_diff := (shift(Position, n = -1) - Position), by = ch]
gen_map[, cM_diff := (shift(cumulative, n = -1) - cumulative), by = ch]
gen_map[, rate := cM_diff/(pos_diff/1000000)]
#impute rates for last SNPs per chr
gen_map[,rate := replace(rate, is.na(rate), median(rate, na.rm = TRUE)), by = ch]
gen_map <- gen_map[,c("ch", "Position", "rate", "cumulative")]
colnames(gen_map) <- c("Chromosome", "Position(bp)", "Rate(cM/Mb)", "Map(cM)")
gen_map$Chromosome <- as.character(gen_map$Chromosome)
?paste
gen_map$Chromosome
gen_map[,c("Chromosome")]
paste(gen_map[,c("Chromosome")], "a", collapse = "")
gen_map$Chromosome
?paste0
paste0("chr", gen_map$Chromosome, sep = "")
gen_map$Chromosome <- paste("chr", gen_map$Chromosome, sep = "")
#save chr1 and complete set
B73_genmap_chr1 <- gen_map[Chromosome == "chr1"]
B73_genmap <- gen_map
write.csv(genmap_chr1, "../data/test_data/B73_genmap_chr1.csv", row.names = FALSE)
#save chr1 and complete set
genmap_chr1 <- gen_map[Chromosome == "chr1"]
write.csv(genmap_chr1, "../data/test_data/B73_genmap_chr1.csv", row.names = FALSE)
write.csv(gen_map, "../data/test_data/B73_genmap.csv", row.names = FALSE)
library(openxlsx)
#genotpyes
#turn A/A encoding to 0,1,2 of nam snp genos raw
NAM_genos <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt", header = TRUE,
row.names = 1)
#only parent genos
NAM_genos <- NAM_genos[,c(1:27)]
#B73 allele
B73_allele <- data.table("SNP" = row.names(NAM_genos), "B73" = substring(NAM_genos[,1], 1, 1))
View(B73_allele)
#merge on SNP id
gen_map <- merge(NAM_map[,c("marker", "ch", "cumulative")],
SNP_pos[,c("Marker", "Position")], by.x = "marker", by.y = "Marker")
gen_map$Position <- as.numeric(gen_map$Position)
#sort by chr then position
gen_map <- gen_map[order(gen_map$ch, gen_map$Position),]
gen_map <- data.table(gen_map)
gen_map[, order := ((shift(cumulative, n = -1) - cumulative) >= 0), by = ch]
#manually remove "misplaced SNPs"
gen_map <- gen_map[!(marker %in% c("PZA01072.1", "PZA00545.26", "PZA00963.3", "PZA01960.1",
"zb7.2", "PHM1184.26", "PHM2438.28", "PZA03227.1"))]
#remove SNPs where cumulative cM order != SNP position order
gen_map <- gen_map[order == TRUE]
#(i+1-i)/(j+1-j) where i is cM and j is Mb, transform to Mb, group by chr
gen_map[, pos_diff := (shift(Position, n = -1) - Position), by = ch]
gen_map[, cM_diff := (shift(cumulative, n = -1) - cumulative), by = ch]
gen_map[, rate := cM_diff/(pos_diff/1000000)]
#impute rates for last SNPs per chr
gen_map[,rate := replace(rate, is.na(rate), median(rate, na.rm = TRUE)), by = ch]
table(gen_map$marker %in% B73_allele$SNP)
write.csv(B73_allele, "../data/test_data/B73_alleles.csv", row.names = FALSE)
View(B73_allele)
SNP_pos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_1144SNPs_AGPv1_positions.xlsx")
SNP_pos <- SNP_pos[!((SNP_pos$Position == "NULL") | (SNP_pos$Position == "multiple")),]
View(NAM_map)
View(SNP_pos)
View(gen_map)
View(B73_genmap)
#save SNP positions
SNP_pos <- SNP_pos[,c("Marker", "Chr", "Position")]
View(SNP_pos)
colnames(SNP_pos) <- c("Marker", "Chromosome", "Position(bp)")
#merge on SNP id
gen_map <- merge(NAM_map[,c("marker", "ch", "cumulative")],
SNP_pos[,c("Marker", "Position(bp)")], by.x = "marker", by.y = "Marker")
write.csv(SNP_pos, "NAM_SNP_positions.csv", row.names = FALSE)
write.csv(SNP_pos, "../data/NAM_SNP_positions.csv", row.names = FALSE)
write.csv(SNP_pos, "../data/test_data/NAM_SNP_positions.csv", row.names = FALSE)
gen_map <- merge(NAM_map[,c("marker", "ch", "cumulative")],
SNP_pos[,c("Marker", "Position(bp)")], by.x = "marker", by.y = "Marker")
gen_map$Position <- as.numeric(gen_map$Position)
#sort by chr then position
gen_map <- gen_map[order(gen_map$ch, gen_map$Position),]
gen_map <- data.table(gen_map)
gen_map[, order := ((shift(cumulative, n = -1) - cumulative) >= 0), by = ch]
#manually remove "misplaced SNPs"
gen_map <- gen_map[!(marker %in% c("PZA01072.1", "PZA00545.26", "PZA00963.3", "PZA01960.1",
"zb7.2", "PHM1184.26", "PHM2438.28", "PZA03227.1"))]
#remove SNPs where cumulative cM order != SNP position order
gen_map <- gen_map[order == TRUE]
#(i+1-i)/(j+1-j) where i is cM and j is Mb, transform to Mb, group by chr
gen_map[, pos_diff := (shift(Position, n = -1) - Position), by = ch]
gen_map[, cM_diff := (shift(cumulative, n = -1) - cumulative), by = ch]
gen_map[, rate := cM_diff/(pos_diff/1000000)]
#impute rates for last SNPs per chr
gen_map[,rate := replace(rate, is.na(rate), median(rate, na.rm = TRUE)), by = ch]
gen_map <- gen_map[,c("ch", "Position", "rate", "cumulative")]
colnames(gen_map) <- c("Chromosome", "Position(bp)", "Rate(cM/Mb)", "Map(cM)")
#gen_map$Chromosome <- as.character(gen_map$Chromosome)
#gen_map$Chromosome <- paste("chr", gen_map$Chromosome, sep = "")
#save chr1 and complete set
genmap_chr1 <- gen_map[Chromosome == "chr1"]
write.csv(genmap_chr1, "../data/test_data/B73_genmap_chr1.csv", row.names = FALSE)
write.csv(gen_map, "../data/test_data/B73_genmap.csv", row.names = FALSE)
#save chr1 and complete set
genmap_chr1 <- gen_map[Chromosome == 1]
write.csv(genmap_chr1, "../data/test_data/B73_genmap_chr1.csv", row.names = FALSE)
write.csv(gen_map, "../data/test_data/B73_genmap.csv", row.names = FALSE)
View(genmap_chr1)
genmap_chr1[order(genmap_chr1$`Position(bp)`),]
genmap_chr1[order(genmap_chr1$`Position(bp)`),] -> test
View(test)
#genotpyes
#reduce nam offspring genotypes to subset
#load NAM genos imputed
offspring_genos <- read.xlsx("../data/NAM_map_and_genos-121025/NAM_genos_imputed_20090807.xlsx")
View(offspring_genos)
#get pop 1 genotypes
pop_1_genos <- offspring_genos[c(3:196),]
View(pop_1_genos)
colnames(pop_1_genos) <- offspring_genos[2,]
write.csv(pop_1_genos, "../data/test_data/pop_1_genos.csv", row.names = FALSE)
#turn A/A encoding to 0,1,2 of nam snp genos raw
NAM_genos <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt", header = TRUE,
row.names = 1)
View(NAM_genos)
#only parent genos
NAM_genos <- NAM_genos[,c(1:27)]
#only parent genos
NAM_parent_genos <- t(NAM_genos[,c(1:27)])
t(NAM_genos)
View(NAM_parent_genos)
write.csv(NAM_parent_genos, "../data/test_data/NAM_parent_genos.csv", row.names = FALSE)
write.csv(NAM_parent_genos, "../data/test_data/NAM_parent_genos.csv")
#turn A/A encoding to 0,1,2 of nam snp genos raw
NAM_genos <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt", header = TRUE)
View(NAM_genos)
#only parent genos
NAM_parent_genos <- t(NAM_genos[,c(1:27)])
View(NAM_parent_genos)
#turn A/A encoding to 0,1,2 of nam snp genos raw
NAM_genos <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt", header = TRUE,
row.names = 1)
View(NAM_genos)
#turn A/A encoding to 0,1,2 of nam snp genos raw
NAM_genos <- read.table("../data/NAM_map_and_genos-121025/NAM_SNP_genos_raw_20090921.txt",
row.names = 1)
View(NAM_map)
View(NAM_genos)
#only parent genos
NAM_parent_genos <- t(NAM_genos[,c(1:27)])
View(NAM_parent_genos)
colnames(NAM_parent_genos)[1] <- "RIL"
write.csv(NAM_parent_genos, "../data/test_data/NAM_parent_genos.csv")
write.csv(NAM_parent_genos, "../data/test_data/NAM_parent_genos.csv")
write.csv(NAM_parent_genos, "../data/test_data/NAM_parent_genos.csv", row.names = FALSE)
library(adegenet)
data(microsatt)
x <- as.genpop(microsatt$tab)
#allele counts
x@tab
#calculate allele frequencies
X <- makefreq(x, missing = "mean", quiet = TRUE)
X
x <- matrix(c(0,1,2,1,1,2,0,0,0,0,1,1), nrow = 3)
View(x)
x <- matrix(c(0,1,0,1,2,0,2,0,1,1,0,1), nrow = 3)
source("C:/Users/PHLUP/Masterarbeit/R_scripts/genetic_dist.R")
x <- matrix(c(0,1,0,1,2,0,2,0,1,1,0,1), nrow = 3)
View(x)
makefreq(x)
calculate_snp_frequency <- function(matrix) {
num_individuals <- nrow(matrix)
num_snps <- ncol(matrix)
snp_frequencies <- matrix(0, nrow = num_snps, ncol = 3)
for (j in 1:num_snps) {
snp_counts <- table(matrix[, j])
if (0 %in% names(snp_counts)) {
snp_count_0 <- snp_counts[["0"]]
} else {
snp_count_0 <- 0
}
if (1 %in% names(snp_counts)) {
snp_count_1 <- snp_counts[["1"]]
} else {
snp_count_1 <- 0
}
if (2 %in% names(snp_counts)) {
snp_count_2 <- snp_counts[["2"]]
} else {
snp_count_2 <- 0
}
snp_frequency_0 <- snp_count_0 / num_individuals
snp_frequency_1 <- snp_count_1 / num_individuals
snp_frequency_2 <- snp_count_2 / num_individuals
snp_frequencies[j, ] <- c(snp_frequency_0, snp_frequency_1, snp_frequency_2)
}
return(snp_frequencies)
}
x@tab
x <- as.genpop(microsatt$tab)
x@tab
as.matrix(x@tab)
calculate_snp_frequency(as.matrix(x@tab))
example_matrix <- matrix(c(0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1), nrow = 3, ncol = 4, byrow = TRUE)
snp_frequencies <- calculate_snp_frequency(example_matrix)
print(snp_frequencies)
View(example_matrix)
