chisq.test(matrix(data = c(1,2,3,4), ncol = 2))
chisq.test(matrix(data = c(1,2,30,40), ncol = 2))
chisq.test(matrix(data = c(1,21,30,40), ncol = 2))
#calculate # of het
table(substr(unlist(sim_geno),1,1) == substr(unlist(sim_geno),2,2))
table(substr(unlist(real_geno),1,1) == substr(unlist(real_geno),2,2))
chisq.test(matrix(data = c(4054,184902,4390,184566), ncol = 2))
sim_geno[sample(c(1:194, 100)),]
sim_geno[,sample(c(1:194, 100))]
sim_geno[,sample(c(1:194, 100))] -> test
sim_geno[sample(c(1:194, 100)),] -> test
sim_geno[sample(c(1:194, 10)),] -> test
sample(c(1:194, 10))
?sample
sample(c(1:194), 10)
sim_geno[sample(c(1:194), 10),] -> test
#calculate # of het
sample <- sample(c(1:194), 10)
table(substr(unlist(sim_geno[sample,]),1,1) == substr(unlist(sim_geno[sample,]),2,2))
table(substr(unlist(real_geno[sample,]),1,1) == substr(unlist(real_geno[sample,]),2,2))
chisq.test(matrix(c(205,9535,190,9550), ncol = 2))
as.matrix(table(substr(unlist(sim_geno[sample,]),1,1) == substr(unlist(sim_geno[sample,]),2,2)))
as.matrix(cbind(table(substr(unlist(sim_geno[sample,]),1,1) == substr(unlist(sim_geno[sample,]),2,2))),
table(substr(unlist(real_geno[sample,]),1,1) == substr(unlist(real_geno[sample,]),2,2)))
as.matrix(cbind(table(substr(unlist(sim_geno[sample,]),1,1) == substr(unlist(sim_geno[sample,]),2,2)),
table(substr(unlist(real_geno[sample,]),1,1) == substr(unlist(real_geno[sample,]),2,2))))
#chisq.test
chisq.test(het_mat)
het_mat <- as.matrix(cbind(table(substr(unlist(sim_geno[sample,]),1,1) == substr(unlist(sim_geno[sample,]),2,2)),
table(substr(unlist(real_geno[sample,]),1,1) == substr(unlist(real_geno[sample,]),2,2))))
#chisq.test
chisq.test(het_mat)
#chisq.test
chisq.test(het_mat)$p.value
#calculate # of het
sample <- sample(c(1:194), 100)
het_mat <- as.matrix(cbind(table(substr(unlist(sim_geno[sample,]),1,1) == substr(unlist(sim_geno[sample,]),2,2)),
table(substr(unlist(real_geno[sample,]),1,1) == substr(unlist(real_geno[sample,]),2,2))))
#chisq.test
chisq.test(het_mat)$p.value
#calculate # of het
sample <- sample(c(1:194), 50)
het_mat <- as.matrix(cbind(table(substr(unlist(sim_geno[sample,]),1,1) == substr(unlist(sim_geno[sample,]),2,2)),
table(substr(unlist(real_geno[sample,]),1,1) == substr(unlist(real_geno[sample,]),2,2))))
#chisq.test
chisq.test(het_mat)$p.value
het_mat
#calculate # of het
sample <- sample(c(1:194), 20)
het_mat <- as.matrix(cbind(table(substr(unlist(sim_geno[sample,]),1,1) == substr(unlist(sim_geno[sample,]),2,2)),
table(substr(unlist(real_geno[sample,]),1,1) == substr(unlist(real_geno[sample,]),2,2))))
#chisq.test
chisq.test(het_mat)$p.value
het_mat
table(unlist(sim_geno))
table(unlist(real_geno))
names(table(unlist(real_geno)))
table(unlist(real_geno))[names(table(unlist(real_geno)))]
table(unlist(sim_geno))[names(table(unlist(real_geno)))]
#calc # of all genos
geno_mat <- as.matrix(cbind(table(unlist(sim_geno))[names(table(unlist(real_geno)))]),
table(unlist(real_geno)))
geno_mat
#calc # of all genos
geno_mat <- as.matrix(cbind(table(unlist(sim_geno))[names(table(unlist(real_geno)))],
table(unlist(real_geno))))
geno_mat
chisq.test(geno_mat)
#calc # of all genos
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[names(table(unlist(real_geno)))],
table(unlist(real_geno[sample,]))))
chisq.test(geno_mat)
geno_mat
#calculate # of het
sample <- sample(c(1:194), 10)
#calc # of all genos
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[names(table(unlist(real_geno)))],
table(unlist(real_geno[sample,]))))
#chisq.tests
chisq.test(het_mat)$p.value
chisq.test(geno_mat)
geno_mat
geno_mat[-1,]
chisq.test(geno_mat[-1,])
sim_add <- read.csv("../sim_output/normal_rec/additive_encoding/add_1.csv")
View(sim_add)
#vary over all
#read real and sim pop
sim_geno <- read.csv("../sim_output/normal_rec/geno_encoding/geno_1.csv")[-1]
real_add <- read.csv("../test.csv")
View(real_add)
View(sim_add)
194*5-2
194*5
real_add <- read.csv("../data/NAM_genotype_data/additive_encoding/pop_1_add.csv")
real_add
View(real_add)
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
table(substr(unlist(sim_geno),1,1) == substr(unlist(sim_geno),2,2))
table(unlist(sim_add))
table(substr(unlist(real_geno),1,1) == substr(unlist(real_geno),2,2))
table(unlist(real_add))
het_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]) == unlist(sim_geno[sample,])),
table(unlist(real_geno[sample,]) == (real_geno[sample,]))))
het_mat
table(unlist(real_add) == 1)
table(unlist(real_add) == 0)
het_mat <- as.matrix(cbind(table(unlist(sim_add) == 0), table(unlist(real_add) == 0)))
het_mat
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample]) == 0)))
het_mat
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample]) == 0)))
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat
table(unlist(real_add))
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#chisq.tests
chisq.test(het_mat)$p.value
het_mat
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#chisq.tests
chisq.test(het_mat)$p.value
rowSums(sim_add)
sim_add
#ks test
ks.test(rowSums(sim_add), rowSums(real_add))
#ks test
ks.test(rowSums(sim_add[sample,]), rowSums(real_add[sample,]))
install.packages("transport")
library(transport)
wasserstein(rowSums(sim_add), rowSums(real_add))
?wasserstein
matrix(runif(500),250,2)
pp(matrix(runif(500),250,2))
pp(matrix(runif(500),250))
matrix(runif(500),250)
matrix(runif(500))
pp(matrix(runif(500)))
?pp
pp(rowSums(sim_add))
wasserstein(pp(rowSums(sim_add)), pp(rowSums(real_add)))
wasserstein1d(rowSums(sim_add), rowSums(real_add))
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
x <- rnorm(200)
y <- rnorm(150,2)
wasserstein1d(x,y)
rnorm(150,2)
x <- rnorm(200)
y <- rnorm(150,30)
wasserstein1d(x,y)
x <- rnorm(200)
y <- rnorm(150,6000)
wasserstein1d(x,y)
x <- rnorm(200,5000)
y <- rnorm(150,6000)
wasserstein1d(x,y)
x <- rnorm(200,6050)
y <- rnorm(150,6000)
wasserstein1d(x,y)
sum_stats <- c(het_p, geno_p, ks_p, w1d)
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
geno_p <- chisq.test(geno_mat)$p.value
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
sum_stats <- c(het_p, geno_p, ks_p, w1d)
sum_stats
apply(sum_stats, 1, signif,2)
apply(sum_stats, 2, signif,2)
sum_stats
signif(sum_stats, 2)
w1d
round(sum_stats, 2)
sum_stats <- ifelse(sum_stats < 0.001, "<0.001", round(sum_stats,2))
sum_stats
#read populations
populations <- read.csv("../data/sim_data/populations.csv")
populations$pop
#vary over all simulated pops
for(i in populations$pop){
print(i)
}
paste("../sim_output/normal_rec/geno_encoding/geno_", 1, ".csv")
paste("../sim_output/normal_rec/geno_encoding/geno_", 1, ".csv", sep = "")
sim_geno <- read.csv(paste("../sim_output/normal_rec/geno_encoding/geno_",1, "_.csv", sep = ""))[-1]
sim_geno <- read.csv(paste("../sim_output/normal_rec/geno_encoding/geno_",1, ".csv", sep = ""))[-1]
##1.----
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = "", "ks_p" = NA, "w1d" = NA)
View(sum_stats)
sum_stats[1, c("het_p", "geno_p", "ks_p", "w1d")]
##1.----
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = NA, "ks_p" = NA, "w1d" = NA)
##1.----
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = NA, "ks_p" = NA, "w1d" = NA)
#vary over all simulated pops
for(i in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/normal_rec/geno_encoding/geno_", i, ".csv", sep = ""))[-1]
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",i,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/normal_rec/additive_encoding/add_",i,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
#tabulate entire df
table(unlist(sim_geno))
table(unlist(real_geno))
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[names(table(unlist(real_geno)))],
table(unlist(real_geno[sample,]))))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
geno_p <- chisq.test(geno_mat)$p.value
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
stats <- c(het_p, geno_p, ks_p, w1d)
stats <- ifelse(sum_stats < 0.001, "<0.001", round(sum_stats,2))
sum_stats[i, c("het_p", "geno_p", "ks_p", "w1d")] <- stats
}
warnings()
View(sum_stats)
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = NA, "ks_p" = NA, "w1d" = NA)
#vary over all simulated pops
for(i in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/normal_rec/geno_encoding/geno_", i, ".csv", sep = ""))[-1]
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",i,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/normal_rec/additive_encoding/add_",i,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
#tabulate entire df
table(unlist(sim_geno))
table(unlist(real_geno))
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[names(table(unlist(real_geno)))],
table(unlist(real_geno[sample,]))))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
geno_p <- chisq.test(geno_mat)$p.value
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
stats <- c(het_p, geno_p, ks_p, w1d)
stats <- ifelse(sum_stats < 0.001, "<0.001", round(sum_stats,2))
print(stats)
sum_stats[i, c("het_p", "geno_p", "ks_p", "w1d")] <- stats
}
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = NA, "ks_p" = NA, "w1d" = NA)
#vary over all simulated pops
for(i in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/normal_rec/geno_encoding/geno_", i, ".csv", sep = ""))[-1]
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",i,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/normal_rec/additive_encoding/add_",i,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
#tabulate entire df
table(unlist(sim_geno))
table(unlist(real_geno))
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[names(table(unlist(real_geno)))],
table(unlist(real_geno[sample,]))))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
geno_p <- chisq.test(geno_mat)$p.value
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
stats <- c(het_p, geno_p, ks_p, w1d)
stats <- ifelse(stats < 0.001, "<0.001", round(stats,2))
print(stats)
sum_stats[i, c("het_p", "geno_p", "ks_p", "w1d")] <- stats
}
warnings()
sim_geno <- read.csv(paste("../sim_output/normal_rec/geno_encoding/geno_", 8, ".csv", sep = ""))[-1]
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",8,"_genos.csv", sep = ""))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[names(table(unlist(real_geno)))],
table(unlist(real_geno[sample,]))))
geno_mat
table(unlist(sim_geno[sample,])
)
View(sim_geno)
View(genmap)
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
table(unlist(sim_geno[sample,]))
table(unlist(sim_geno[sample,]))[names(table(unlist(real_geno)))]
table(unlist(real_geno[sample,]))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[names(table(unlist(real_geno)))],
table(unlist(real_geno[sample,]))))
chisq.test(geno_mat)
intersect(names(table(unlist(real_geno))), names(table(unlist(sim_geno))))
geno_names <- intersect(names(table(unlist(real_geno))), names(table(unlist(sim_geno))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
geno_mat
chisq.test(geno_mat)
geno_mat <- geno_mat[complete.cases(geno_mat),]
geno_mat
chisq.test(geno_mat)$p.value
het_mat
fisher.test(geno_mat)$p.value
geno_names
table(unlist(sim_geno[sample,]))
table(unlist(sim_geno[sample,]))[geno_names]
names(table(unlist_real_geno))
names(table(unlist(real_geno)))
names(table(unlist(sim_geno)))
geno_names <- intersect(names(table(unlist(sim_geno[sample,]))), names(table(unlist(real_geno[sample,]))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
geno_mat
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = NA, "ks_p" = NA, "w1d" = NA)
#vary over all simulated pops
for(i in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/normal_rec/geno_encoding/geno_", i, ".csv", sep = ""))[-1]
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",i,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/normal_rec/additive_encoding/add_",i,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
#tabulate entire df
table(unlist(sim_geno))
table(unlist(real_geno))
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_names <- intersect(names(table(unlist(sim_geno[sample,]))), names(table(unlist(real_geno[sample,]))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
geno_p <- chisq.test(geno_mat)$p.value
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
stats <- c(het_p, geno_p, ks_p, w1d)
stats <- ifelse(stats < 0.001, "<0.001", round(stats,2))
print(stats)
sum_stats[i, c("het_p", "geno_p", "ks_p", "w1d")] <- stats
}
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = NA, "ks_p" = NA, "w1d" = NA)
#vary over all simulated pops
for(i in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/normal_rec/geno_encoding/geno_", i, ".csv", sep = ""))[-1]
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",i,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/normal_rec/additive_encoding/add_",i,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",i,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
#tabulate entire df
table(unlist(sim_geno))
table(unlist(real_geno))
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_names <- intersect(names(table(unlist(sim_geno[sample,]))), names(table(unlist(real_geno[sample,]))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
geno_p <- chisq.test(geno_mat)$p.value
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
stats <- c(het_p, geno_p, ks_p, w1d)
stats <- ifelse(stats < 0.001, "<0.001", round(stats,3))
print(stats)
sum_stats[i, c("het_p", "geno_p", "ks_p", "w1d")] <- stats
}
for(i in rec_param){
print(i)
}
#vary over all recombination parameters
rec_param <- c("normal_rec", "high_rec", "zero_rec", "mean_rec")
for(i in rec_param){
print(i)
}
rec_param <- c("normal_rec", "high_rec", "zero_rec", "mean_rec")
for(i in rec_param){
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = NA, "ks_p" = NA, "w1d" = NA)
#vary over all simulated pops
for(j in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/",i,"/geno_encoding/geno_", j, ".csv", sep = ""))[-1]
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",j,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/",i,"/additive_encoding/add_",j,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",j,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
#tabulate entire df
table(unlist(sim_geno))
table(unlist(real_geno))
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_names <- intersect(names(table(unlist(sim_geno[sample,]))), names(table(unlist(real_geno[sample,]))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
geno_p <- chisq.test(geno_mat)$p.value
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
stats <- c(het_p, geno_p, ks_p, w1d)
stats <- ifelse(stats < 0.001, "<0.001", round(stats,3))
print(stats)
sum_stats[i, c("het_p", "geno_p", "ks_p", "w1d")] <- stats
}
print("finished")
write.csv(sum_stats, paste("../stats/sum_stats_",i, sep = ""), row.names = FALSE)
}
warnings()
strsplit(rec_param[1],"_")[1]
strsplit(rec_param[1],"_")
strsplit(rec_param[1],"_")[[1]]
strsplit(rec_param[1],"_")[[1]][1]
rec_param <- c("normal_rec", "high_rec", "zero_rec", "mean_rec")
for(i in rec_param){
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "geno_p" = NA, "ks_p" = NA, "w1d" = NA)
#vary over all simulated pops
for(j in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/",i,"/geno_encoding/",strsplit(rec_param[i],"_")[[1]][1], "_geno_", j, ".csv", sep = ""))[-1]
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",j,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/",i,"/additive_encoding/",strsplit(rec_param[i],"_")[[1]][1], "_add_",j,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",j,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
#tabulate entire df
table(unlist(sim_geno))
table(unlist(real_geno))
#calculate # of het
sample <- sample(c(1:194), 10)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_names <- intersect(names(table(unlist(sim_geno[sample,]))), names(table(unlist(real_geno[sample,]))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
geno_p <- chisq.test(geno_mat)$p.value
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
stats <- c(het_p, geno_p, ks_p, w1d)
stats <- ifelse(stats < 0.001, "<0.001", round(stats,3))
print(stats)
sum_stats[i, c("het_p", "geno_p", "ks_p", "w1d")] <- stats
}
print("finished")
write.csv(sum_stats, paste("../stats/sum_stats_",i,".csv", sep = ""), row.names = FALSE)
}
