size = 3, color = "black") +
annotate("text", x = 90, y = 0.65, label = paste("Wasserstein Distance: ", 0),
size = 3, color = "black")
plot_ld_decay <- function(real, sim, ks_p, w1d, outpath){
plot <- ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", linewidth = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7))) +
annotate("text", x = 90, y = 0.75, label = paste("KS Test P-Value: ", ks_p),
size = 3, color = "black") +
annotate("text", x = 90, y = 0.65, label = paste("Wasserstein Distance: ", w1d),
size = 3, color = "black")
ggsave(out_path, plot, dpi = 300, width = 8, height = 6, units = "in", device = "png")
}
plot_ld_decay(real, sim, 0, 0, "../plots/popgen_plots/LD_decay/test.png")
plot_ld_decay <- function(real, sim, ks_p, w1d, out_path){
plot <- ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", linewidth = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7))) +
annotate("text", x = 90, y = 0.75, label = paste("KS Test P-Value: ", ks_p),
size = 3, color = "black") +
annotate("text", x = 90, y = 0.65, label = paste("Wasserstein Distance: ", w1d),
size = 3, color = "black")
ggsave(out_path, plot, dpi = 300, width = 8, height = 6, units = "in", device = "png")
}
plot_ld_decay(real, sim, 0, 0, "../plots/popgen_plots/LD_decay/test.png")
plot_ld_decay(real, sim, 0, 0, "../plots/popgen_plots/LD_decay/test")
plot <- ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", linewidth = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7))) +
annotate("text", x = 90, y = 0.75, label = paste("KS Test P-Value: ", ks_p),
size = 3, color = "black") +
annotate("text", x = 90, y = 0.65, label = paste("Wasserstein Distance: ", w1d),
size = 3, color = "black")
plot_ld_decay(real, sim, 0, 0, "../plots/popgen_plots/LD_decay/test.pdf")
ggsave(out_path, plot, dpi = 300, width = 8, height = 6, units = "in", device = "png", bg = "white")
plot_ld_decay <- function(real, sim, ks_p, w1d, out_path){
plot <- ggplot() +
geom_point(data = real, aes(d, r2, color = "Real genotypes"), size = 1.5, alpha = 0.05) +
geom_point(data = sim, aes(d, r2, color = "Simulated genotypes"), size = 1.5, alpha = 0.05) +
geom_smooth(data = real, aes(d, r2), method = "loess", se = FALSE, color = "darkblue", span = 0.2) +
geom_smooth(data = sim, aes(d, r2), method = "loess", se = FALSE, color = "darkorange", span = 0.2) +
theme_minimal() +
labs(title = "LD decay of real and simulated genotypes for population i", x = "Distance in cM", y = expression(r^2)) +
theme(plot.title = element_text(hjust = 0.5),
legend.box.background = element_rect(color = "grey", linewidth = 1),
legend.background = element_rect(fill = "white", color = NA),
legend.position = c(0.85,0.85)) +
scale_color_manual(name = NULL, values = c("Real genotypes" = "blue", "Simulated genotypes" = "orange"),
guide = guide_legend(override.aes = list(alpha = 0.7))) +
annotate("text", x = 90, y = 0.75, label = paste("KS Test P-Value: ", ks_p),
size = 3, color = "black") +
annotate("text", x = 90, y = 0.65, label = paste("Wasserstein Distance: ", w1d),
size = 3, color = "black")
ggsave(out_path, plot, dpi = 300, width = 8, height = 6, units = "in", device = "png", bg = "white")
}
plot_ld_decay(real, sim, 0, 0, "../plots/popgen_plots/LD_decay/test.png")
sim_ld <- LD.decay(sim_add, ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG
real_ld <- LD.decay(real_add, ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG
real_r2_D$r2
real_r2_D$r2[["r2"]]
#ks test on r2 measure
ks.test(sim_r2_D$r2, real_r2_D$r2)
wasserstein1d(sim_r2_D$r2, real_r2_D$r2)
?wasserstein
sim_r2_D
sim_ld$all.LG
sim_ld$all.LG[c("r2", "D")]
sim_ld$all.LG[c("r2", "D"),]
sim_ld$all.LG[,c("r2", "D")]
sim_ld$all.LG[,c("r2", "d")]
sim_ld$all.LG[c("r2", "d")]
##2. popgen stats
sim_ld <- LD.decay(sim_add, ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add, ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
wasserstein(sim_r2_D, real_r2_D)
pp(sim_r2_D)
wasserstein(pp(sim_r2_D), pp(real_r2_D))
?compatible
compatible(pp(matrix(runif(500),250,2)),pp(matrix(runif(500),250,2)))
compatible(pp(matrix(runif(500),250,2)),pp(matrix(runif(501),250,2)))
compatible(pp(matrix(runif(500),250,2)),pp(matrix(runif(502),251,2)))
wasserstein(pp(sample(sim_r2_D,500)), pp(sample(real_r2_D,500)))
sim_r2_D
sample(sim_r2_D, 500)
sample(sim_r2_D, 1)
sample(sim_r2_D, 2)
?sample
sample <- sample(c(1:length(sim_r2_D[,1])), 100)
sample
wasserstein(pp(sim_r2_D[,sample]), pp(real_r2_D[,sample]))
sim_r2_D[,sample]
sim_r2_D[sample]
sim_r2_D[sample,]
wasserstein(pp(sim_r2_D[sample,]), pp(real_r2_D[sample,]))
table(is.na(sim_r2_D[sample,]))
sim_ld <- LD.decay(sim_add[sample,], ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add[sample,], ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
plot_ld_decay(real_r2_D, sim_r2_D, 0, 0, "../test.png")
sample
sample <- sample(c(1:194), 20)
sim_ld <- LD.decay(sim_add[sample,], ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add[sample,], ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
plot_ld_decay(real_r2_D, sim_r2_D, 0, 0, "../test.png")
real_r2_D
sim_add[sample,]
sim_add[sample,] -> test
View(test)
sample
length(sim_geno[,1])
populations$size
populations[1, size]
populations[pop == 1, size]
populations
populations[pop == 1, "size"]
View(populations)
populations[pop == 1, 1]
populations[1, 1]
populations[1, 4]
populations[1, size]
populations[1, c("size")]
populations[pop == 1, c("size")]
populations[pop == 1]
populations[populations$pop == 1, c("size")]
populations[populations$pop == 1, "size"]
populations[populations$pop == 1, size]
##1. dist stats
#calculate # of het
sample <- sample(c(1:populations[populations$pop == j, "size"]), 20)
##2. popgen stats
sim_ld <- LD.decay(sim_add[sample,], ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add[sample,], ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
plot_ld_decay(real_r2_D, sim_r2_D, 0, 0, "../test.png")
##1. dist stats
#calculate # of het
sample <- sample(c(1:populations[populations$pop == j, "size"]), 50)
##2. popgen stats
sim_ld <- LD.decay(sim_add[sample,], ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add[sample,], ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
plot_ld_decay(real_r2_D, sim_r2_D, 0, 0, "../test.png")
##1. dist stats
#calculate # of het
sample <- sample(c(1:populations[populations$pop == j, "size"]), 150)
sim_ld <- LD.decay(sim_add[sample,], ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add[sample,], ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
plot_ld_decay(real_r2_D, sim_r2_D, 0, 0, "../test.png")
#ks test on r2 measure
ks.test(sim_r2_D$r2, real_r2_D$r2)
wasserstein1d(sim_r2_D$r2, real_r2_D$r2)
sim_geno <- read.csv(paste("../sim_output/",i,"/geno_encoding/geno_",j,".csv", sep = ""))
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",j,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/",i,"/additive_encoding/add_",j,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",j,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
##1. dist stats
#calculate # of het
sample <- sample(c(1:populations[populations$pop == j, "size"]), 20)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_names <- intersect(names(table(unlist(sim_geno[sample,]))), names(table(unlist(real_geno[sample,]))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
het_phi <- phi(het_mat)$phi_adjusted
geno_p <- chisq.test(geno_mat)$p.value
geno_cramersv <- cramers_v(geno_mat)$Cramers_v_adjusted
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
##2. popgen stats
sim_ld <- LD.decay(sim_add, ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add, ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
#ks test + w1d on r2 measure
ld_ks_p <- ks.test(sim_r2_D$r2, real_r2_D$r2)$p.value
ld_w1d <- wasserstein1d(sim_r2_D$r2, real_r2_D$r2)
plot_ld_decay(real_r2_D, sim_r2_D, ld_ks_p, ld_w1d, "../test.png")
#format sumstats
p_vals <- c(het_p, geno_p, ks_p, ld_ks_p)
p_vals <- ifelse(p_vals < 0.001, "<0.001", round(p_vals,3))
effects <- round(c(het_phi, geno_cramersv, w1d, ld_w1d),2)
stats <- c(p_vals[1], effects[1], p_vals[2], effects[2], p_vals[3], effects[3], p_vals[4], effects[4])
sum_stats[sum_stats$population == j, c("het_p", "het_phi", "geno_p", "geno_cramersV", "ks_p", "w1d",
"ld_ks_p", "ld_w1d")] <- stats
sum_stats
library(sommer)
library(stats)
library(transport)
library(effectsize)
source("stat_functions.R")
##generate summary statistics for genotype simulation across all populations and recombination scenarios
#Stats implemented:
#1. distributional differences
#Table of simulated alleles in diploid gene sequence format
#Heterozygous/reference/derived alleles
#chisq test between tables (hetero+all)
#ks test for dist diff
#table p threshold + p raw (p adjust?)
#calc concordance, save table
#2. additional popgen stats
#linkage disequilibrium decay (r2~d)
#ks test/density of r2 between sim and real encoding
#distance measure (e.g. euclidean/rogers distance)
#nucleotide diversity
#read genmap to constrain markers/calc ld decay etc.
genmap <- read.csv("../data/sim_data/B73_genmap.csv")
#read populations
populations <- read.csv("../data/sim_data/populations.csv")
#LD decay
#keep Locus/Marker, Position and LG/Chromosome
ld_map <- genmap[,c("Marker", "Map.cM.", "Chromosome")]
colnames(ld_map) <- c("Locus","Position","LG")
#vary over all recombination parameters
rec_param <- c("normal_rec", "high_rec", "zero_rec", "mean_rec")
for(i in rec_param){
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "het_phi" = NA, "geno_p" = NA,
"geno_cramersV" = NA, "ks_p" = NA, "w1d" = NA, "ld_ks_p" = NA, "ld_w1d" = NA)
#vary over all simulated pops
for(j in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/",i,"/geno_encoding/geno_",j,".csv", sep = ""))
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",j,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/",i,"/additive_encoding/add_",j,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",j,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
##1. dist stats
#calculate # of het
sample <- sample(c(1:populations[populations$pop == j, "size"]), 20)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_names <- intersect(names(table(unlist(sim_geno[sample,]))), names(table(unlist(real_geno[sample,]))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
het_phi <- phi(het_mat)$phi_adjusted
geno_p <- chisq.test(geno_mat)$p.value
geno_cramersv <- cramers_v(geno_mat)$Cramers_v_adjusted
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
##2. popgen stats
sim_ld <- LD.decay(sim_add, ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add, ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
#ks test + w1d on r2 measure
ld_ks_p <- ks.test(sim_r2_D$r2, real_r2_D$r2)$p.value
ld_w1d <- wasserstein1d(sim_r2_D$r2, real_r2_D$r2)
plot_ld_decay(real_r2_D, sim_r2_D, ld_ks_p, ld_w1d,
out_path = paste("../plots/popgen_plots/LD_decay/",i,"/ld_decay_",j,".png", sep = ""))
#format sumstats
p_vals <- c(het_p, geno_p, ks_p, ld_ks_p)
p_vals <- ifelse(p_vals < 0.001, "<0.001", round(p_vals,3))
effects <- round(c(het_phi, geno_cramersv, w1d, ld_w1d),2)
stats <- c(p_vals[1], effects[1], p_vals[2], effects[2], p_vals[3], effects[3], p_vals[4], effects[4])
sum_stats[sum_stats$population == j, c("het_p", "het_phi", "geno_p", "geno_cramersV", "ks_p", "w1d",
"ld_ks_p", "ld_w1d")] <- stats
}
print("finished")
write.csv(sum_stats, paste("../stats/sum_stats_",i,".csv", sep = ""), row.names = FALSE)
}
#read in sum stats to compare rec scenarios
sum_results <- data.frame("rec_param" = c("normal_rec", "high_rec", "zero_rec", "mean_rec"),
"het_sig" = NA, "mean_sd_phi" = NA, "geno_sig" = NA, "mean_sd_cramersV" = NA,
"ks_sig" = NA, "mean_sd_w1d" = NA, "ld_ks_sig", "mean_sd_ld_w1d")
for(i in rec_param){
sum_stats <- read.csv(paste("../stats/sum_stats_",i,".csv", sep = ""))
het_sig <- paste(table(sum_stats$het_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$het_p)), sep = "")
het_phi <- paste("median: ", median(sum_stats$het_phi), ", IQR: ", IQR(sum_stats$het_phi),
", mean: ", signif(mean(sum_stats$het_phi),3),
" ± ", signif(sd(sum_stats$het_phi),3), sep = "")
geno_sig <- paste(table(sum_stats$geno_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$geno_p)), sep = "")
geno_cramersV <- paste("median: ", median(sum_stats$geno_cramersV), ", IQR: ", IQR(sum_stats$geno_cramersV),
", mean: ", signif(mean(sum_stats$geno_cramersV),3),
" ± ", signif(sd(sum_stats$geno_cramersV),3), sep = "")
ks_sig <- paste(table(sum_stats$ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ks_p)), sep = "")
w1d <- paste("median: ", median(sum_stats$w1d), ", IQR: ", IQR(sum_stats$w1d),
", mean: ", signif(mean(sum_stats$w1d),3),
" ± ", signif(sd(sum_stats$w1d),3), sep = "")
ld_ks_sig <- paste(table(sum_stats$ld_ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ld_ks_p)), sep = "")
ld_w1d <- paste("median: ", median(sum_stats$ld_w1d), ", IQR: ", IQR(sum_stats$ld_w1d),
", mean: ", signif(mean(sum_stats$ld_w1d),3),
" ± ", signif(sd(sum_stats$ld_w1d),3), sep = "")
results <- c(het_sig, het_phi, geno_sig, geno_cramersV, ks_sig, w1d, ld_ks_sig, ld_w1d)
sum_results[sum_results$rec_param == i, c("het_sig", "mean_sd_phi", "geno_sig", "mean_sd_cramersV",
"ks_sig", "mean_sd_w1d", "ld_ks_sig", "mean_sd_ld_w1d")] <- results
}
#linkage disequilibrium decay (r2~d)
#ks test/density of r2 between sim and real encoding
#distance measure (e.g. euclidean/rogers distance)
#nucleotide diversity
#read genmap to constrain markers/calc ld decay etc.
genmap <- read.csv("../data/sim_data/B73_genmap.csv")
#read populations
populations <- read.csv("../data/sim_data/populations.csv")
#LD decay
#keep Locus/Marker, Position and LG/Chromosome
ld_map <- genmap[,c("Marker", "Map.cM.", "Chromosome")]
colnames(ld_map) <- c("Locus","Position","LG")
#vary over all recombination parameters
rec_param <- c("normal_rec", "high_rec", "zero_rec", "mean_rec")
for(i in rec_param){
sum_stats <- data.frame("population" = populations$pop, "het_p" = NA, "het_phi" = NA, "geno_p" = NA,
"geno_cramersV" = NA, "ks_p" = NA, "w1d" = NA, "ld_ks_p" = NA, "ld_w1d" = NA)
#vary over all simulated pops
for(j in populations$pop){
#read real and sim pop
sim_geno <- read.csv(paste("../sim_output/",i,"/geno_encoding/geno_",j,".csv", sep = ""))
real_geno <- read.csv(paste("../data/NAM_genotype_data/geno_encoding/pop_",j,"_genos.csv", sep = ""))
sim_add <- read.csv(paste("../sim_output/",i,"/additive_encoding/add_",j,".csv", sep = ""))
real_add <- read.csv(paste("../data/NAM_genotype_data/additive_encoding/pop_",j,"_add.csv", sep = ""))
#constrain to same markers
sim_geno <- sim_geno[,genmap$Marker]
real_geno <- real_geno[,genmap$Marker]
sim_add <- sim_add[,genmap$Marker]
real_add <- real_add[,genmap$Marker]
##1. dist stats
#calculate # of het
sample <- sample(c(1:populations[populations$pop == j, "size"]), 20)
het_mat <- as.matrix(cbind(table(unlist(sim_add[sample,]) == 0), table(unlist(real_add[sample,]) == 0)))
#calc # of all genos
geno_names <- intersect(names(table(unlist(sim_geno[sample,]))), names(table(unlist(real_geno[sample,]))))
geno_mat <- as.matrix(cbind(table(unlist(sim_geno[sample,]))[geno_names],
table(unlist(real_geno[sample,]))[geno_names]))
#chisq.tests
het_p <- chisq.test(het_mat)$p.value
het_phi <- phi(het_mat)$phi_adjusted
geno_p <- chisq.test(geno_mat)$p.value
geno_cramersv <- cramers_v(geno_mat)$Cramers_v_adjusted
#ks test
ks_p <- ks.test(rowSums(sim_add), rowSums(real_add))$p.value
#wasserstein dist
w1d <- wasserstein1d(rowSums(sim_add), rowSums(real_add))
##2. popgen stats
sim_ld <- LD.decay(sim_add, ld_map)
sim_ld$all.LG <- sim_ld$all.LG[(sim_ld$all.LG$p < .001),]
sim_r2_D <- sim_ld$all.LG[c("r2", "d")]
real_ld <- LD.decay(real_add, ld_map)
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$p < .001),]
real_ld$all.LG <- real_ld$all.LG[(real_ld$all.LG$r2 < .99),]
real_r2_D <- real_ld$all.LG[c("r2", "d")]
#ks test + w1d on r2 measure
ld_ks_p <- ks.test(sim_r2_D$r2, real_r2_D$r2)$p.value
ld_w1d <- wasserstein1d(sim_r2_D$r2, real_r2_D$r2)
#plot_ld_decay(real_r2_D, sim_r2_D, ld_ks_p, ld_w1d,
#              out_path = paste("../plots/popgen_plots/LD_decay/",i,"/ld_decay_",j,".png", sep = ""))
#format sumstats
p_vals <- c(het_p, geno_p, ks_p, ld_ks_p)
p_vals <- ifelse(p_vals < 0.001, "<0.001", round(p_vals,3))
effects <- round(c(het_phi, geno_cramersv, w1d, ld_w1d),2)
stats <- c(p_vals[1], effects[1], p_vals[2], effects[2], p_vals[3], effects[3], p_vals[4], effects[4])
sum_stats[sum_stats$population == j, c("het_p", "het_phi", "geno_p", "geno_cramersV", "ks_p", "w1d",
"ld_ks_p", "ld_w1d")] <- stats
}
print("finished")
write.csv(sum_stats, paste("../stats/sum_stats_",i,".csv", sep = ""), row.names = FALSE)
}
#read in sum stats to compare rec scenarios
sum_results <- data.frame("rec_param" = c("normal_rec", "high_rec", "zero_rec", "mean_rec"),
"het_sig" = NA, "mean_sd_phi" = NA, "geno_sig" = NA, "mean_sd_cramersV" = NA,
"ks_sig" = NA, "mean_sd_w1d" = NA, "ld_ks_sig", "mean_sd_ld_w1d")
for(i in rec_param){
sum_stats <- read.csv(paste("../stats/sum_stats_",i,".csv", sep = ""))
het_sig <- paste(table(sum_stats$het_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$het_p)), sep = "")
het_phi <- paste("median: ", median(sum_stats$het_phi), ", IQR: ", IQR(sum_stats$het_phi),
", mean: ", signif(mean(sum_stats$het_phi),3),
" ± ", signif(sd(sum_stats$het_phi),3), sep = "")
geno_sig <- paste(table(sum_stats$geno_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$geno_p)), sep = "")
geno_cramersV <- paste("median: ", median(sum_stats$geno_cramersV), ", IQR: ", IQR(sum_stats$geno_cramersV),
", mean: ", signif(mean(sum_stats$geno_cramersV),3),
" ± ", signif(sd(sum_stats$geno_cramersV),3), sep = "")
ks_sig <- paste(table(sum_stats$ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ks_p)), sep = "")
w1d <- paste("median: ", median(sum_stats$w1d), ", IQR: ", IQR(sum_stats$w1d),
", mean: ", signif(mean(sum_stats$w1d),3),
" ± ", signif(sd(sum_stats$w1d),3), sep = "")
ld_ks_sig <- paste(table(sum_stats$ld_ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ld_ks_p)), sep = "")
ld_w1d <- paste("median: ", median(sum_stats$ld_w1d), ", IQR: ", IQR(sum_stats$ld_w1d),
", mean: ", signif(mean(sum_stats$ld_w1d),3),
" ± ", signif(sd(sum_stats$ld_w1d),3), sep = "")
results <- c(het_sig, het_phi, geno_sig, geno_cramersV, ks_sig, w1d, ld_ks_sig, ld_w1d)
sum_results[sum_results$rec_param == i, c("het_sig", "mean_sd_phi", "geno_sig", "mean_sd_cramersV",
"ks_sig", "mean_sd_w1d", "ld_ks_sig", "mean_sd_ld_w1d")] <- results
}
View(sum_results)
#read in sum stats to compare rec scenarios
sum_results <- data.frame("rec_param" = c("normal_rec", "high_rec", "zero_rec", "mean_rec"),
"het_sig" = NA, "mean_sd_phi" = NA, "geno_sig" = NA, "mean_sd_cramersV" = NA,
"ks_sig" = NA, "mean_sd_w1d" = NA, "ld_ks_sig" = NA, "mean_sd_ld_w1d" = NA)
for(i in rec_param){
sum_stats <- read.csv(paste("../stats/sum_stats_",i,".csv", sep = ""))
het_sig <- paste(table(sum_stats$het_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$het_p)), sep = "")
het_phi <- paste("median: ", median(sum_stats$het_phi), ", IQR: ", IQR(sum_stats$het_phi),
", mean: ", signif(mean(sum_stats$het_phi),3),
" ± ", signif(sd(sum_stats$het_phi),3), sep = "")
geno_sig <- paste(table(sum_stats$geno_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$geno_p)), sep = "")
geno_cramersV <- paste("median: ", median(sum_stats$geno_cramersV), ", IQR: ", IQR(sum_stats$geno_cramersV),
", mean: ", signif(mean(sum_stats$geno_cramersV),3),
" ± ", signif(sd(sum_stats$geno_cramersV),3), sep = "")
ks_sig <- paste(table(sum_stats$ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ks_p)), sep = "")
w1d <- paste("median: ", median(sum_stats$w1d), ", IQR: ", IQR(sum_stats$w1d),
", mean: ", signif(mean(sum_stats$w1d),3),
" ± ", signif(sd(sum_stats$w1d),3), sep = "")
ld_ks_sig <- paste(table(sum_stats$ld_ks_p == "<0.001")[["TRUE"]],"/",
sum(table(sum_stats$ld_ks_p)), sep = "")
ld_w1d <- paste("median: ", median(sum_stats$ld_w1d), ", IQR: ", IQR(sum_stats$ld_w1d),
", mean: ", signif(mean(sum_stats$ld_w1d),3),
" ± ", signif(sd(sum_stats$ld_w1d),3), sep = "")
results <- c(het_sig, het_phi, geno_sig, geno_cramersV, ks_sig, w1d, ld_ks_sig, ld_w1d)
sum_results[sum_results$rec_param == i, c("het_sig", "mean_sd_phi", "geno_sig", "mean_sd_cramersV",
"ks_sig", "mean_sd_w1d", "ld_ks_sig", "mean_sd_ld_w1d")] <- results
}
plot_ld_decay(real_r2_D, sim_r2_D, round(ld_ks_p,3), round(ld_w1d,2),
out_path = paste("../plots/popgen_plots/LD_decay/",i,"/ld_decay_",j,".png", sep = ""))
ld_ks_p <- ks.test(sim_r2_D$r2, real_r2_D$r2)$p.value
ld_w1d <- wasserstein1d(sim_r2_D$r2, real_r2_D$r2)
plot_ld_decay(real_r2_D, sim_r2_D, round(ld_ks_p,3), round(ld_w1d,2),
out_path = paste("../plots/popgen_plots/LD_decay/",i,"/ld_decay_",j,".png", sep = ""))
#format sumstats
